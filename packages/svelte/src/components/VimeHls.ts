/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import { Components, JSX } from '@vime/core';


interface VimeHlsProps {
  
  /** The NPM package version of the `hls.js` library to download and use if HLS is not natively
supported. */
  version?: Components.VimeHls["version"]
  
  /** The `hls.js` configuration. */
  config?: Components.VimeHls["config"]
  
  /** Whether to use CORS to fetch the related image. See
[MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/crossorigin) for more
information. */
  crossOrigin?: Components.VimeHls["crossOrigin"]
  
  /** Provides a hint to the browser about what the author thinks will lead to the best user
experience with regards to what content is loaded before the video is played. See
[MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video#attr-preload) for more
information. */
  preload?: Components.VimeHls["preload"]
  
  /** A URL for an image to be shown while the video is downloading. If this attribute isn't
specified, nothing is displayed until the first frame is available, then the first frame is
shown as the poster frame. */
  poster?: Components.VimeHls["poster"]
  
  /** Determines what controls to show on the media element whenever the browser shows its own set
of controls (e.g. when the controls attribute is specified). */
  controlsList?: Components.VimeHls["controlsList"]
  
  /** **EXPERIMENTAL:** Whether the browser should automatically toggle picture-in-picture mode as
the user switches back and forth between this document and another document or application. */
  autoPiP?: Components.VimeHls["autoPiP"]
  
  /** **EXPERIMENTAL:** Prevents the browser from suggesting a picture-in-picture context menu or to
request picture-in-picture automatically in some cases. */
  disablePiP?: Components.VimeHls["disablePiP"]
  
  /** **EXPERIMENTAL:** Whether to disable the capability of remote playback in devices that are
attached using wired (HDMI, DVI, etc.) and wireless technologies
(Miracast, Chromecast, DLNA, AirPlay, etc). */
  disableRemotePlayback?: Components.VimeHls["disableRemotePlayback"]
  
  /** The title of the current media. */
  mediaTitle?: Components.VimeHls["mediaTitle"]
}

interface VimeHlsEvents {
  
  /**  */
  vLoadStart: Parameters<JSX.VimeHls["onVLoadStart"]>[0]
}

interface VimeHlsSlots {
  default: any
}
  
/* generated by Svelte v3.24.1 */
import {
	SvelteComponent,
	binding_callbacks,
	create_slot,
	detach,
	element,
	init,
	insert,
	listen,
	safe_not_equal,
	set_custom_element_data,
	transition_in,
	transition_out,
	update_slot
} from "svelte/internal";

import { createEventDispatcher, onMount } from "svelte";

function create_fragment(ctx) {
	let vime_hls;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*$$slots*/ ctx[15].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[14], null);

	return {
		c() {
			vime_hls = element("vime-hls");
			if (default_slot) default_slot.c();
			set_custom_element_data(vime_hls, "version", /*version*/ ctx[0]);
			set_custom_element_data(vime_hls, "config", /*config*/ ctx[1]);
			set_custom_element_data(vime_hls, "cross-origin", /*crossOrigin*/ ctx[2]);
			set_custom_element_data(vime_hls, "preload", /*preload*/ ctx[3]);
			set_custom_element_data(vime_hls, "poster", /*poster*/ ctx[4]);
			set_custom_element_data(vime_hls, "controls-list", /*controlsList*/ ctx[5]);
			set_custom_element_data(vime_hls, "auto-pip", /*autoPiP*/ ctx[6]);
			set_custom_element_data(vime_hls, "disable-pip", /*disablePiP*/ ctx[7]);
			set_custom_element_data(vime_hls, "disable-remote-playback", /*disableRemotePlayback*/ ctx[8]);
			set_custom_element_data(vime_hls, "media-title", /*mediaTitle*/ ctx[9]);
		},
		m(target, anchor) {
			insert(target, vime_hls, anchor);

			if (default_slot) {
				default_slot.m(vime_hls, null);
			}

			/*vime_hls_binding*/ ctx[16](vime_hls);
			current = true;

			if (!mounted) {
				dispose = listen(vime_hls, "vLoadStart", /*onEvent*/ ctx[11]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 16384) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[14], dirty, null, null);
				}
			}

			if (!current || dirty & /*version*/ 1) {
				set_custom_element_data(vime_hls, "version", /*version*/ ctx[0]);
			}

			if (!current || dirty & /*config*/ 2) {
				set_custom_element_data(vime_hls, "config", /*config*/ ctx[1]);
			}

			if (!current || dirty & /*crossOrigin*/ 4) {
				set_custom_element_data(vime_hls, "cross-origin", /*crossOrigin*/ ctx[2]);
			}

			if (!current || dirty & /*preload*/ 8) {
				set_custom_element_data(vime_hls, "preload", /*preload*/ ctx[3]);
			}

			if (!current || dirty & /*poster*/ 16) {
				set_custom_element_data(vime_hls, "poster", /*poster*/ ctx[4]);
			}

			if (!current || dirty & /*controlsList*/ 32) {
				set_custom_element_data(vime_hls, "controls-list", /*controlsList*/ ctx[5]);
			}

			if (!current || dirty & /*autoPiP*/ 64) {
				set_custom_element_data(vime_hls, "auto-pip", /*autoPiP*/ ctx[6]);
			}

			if (!current || dirty & /*disablePiP*/ 128) {
				set_custom_element_data(vime_hls, "disable-pip", /*disablePiP*/ ctx[7]);
			}

			if (!current || dirty & /*disableRemotePlayback*/ 256) {
				set_custom_element_data(vime_hls, "disable-remote-playback", /*disableRemotePlayback*/ ctx[8]);
			}

			if (!current || dirty & /*mediaTitle*/ 512) {
				set_custom_element_data(vime_hls, "media-title", /*mediaTitle*/ ctx[9]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(vime_hls);
			if (default_slot) default_slot.d(detaching);
			/*vime_hls_binding*/ ctx[16](null);
			mounted = false;
			dispose();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let __ref;
	let __mounted = false;
	const dispatch = createEventDispatcher();
	let { version = undefined } = $$props;
	let { config = undefined } = $$props;
	let { crossOrigin = undefined } = $$props;
	let { preload = undefined } = $$props;
	let { poster = undefined } = $$props;
	let { controlsList = undefined } = $$props;
	let { autoPiP = undefined } = $$props;
	let { disablePiP = undefined } = $$props;
	let { disableRemotePlayback = undefined } = $$props;
	let { mediaTitle = undefined } = $$props;
	const getAdapter = (...args) => __ref.getAdapter(...args);
	const getWebComponent = () => __ref;

	onMount(() => {
		__mounted = true;
	});

	const setProp = (prop, value) => {
		if (__ref) $$invalidate(10, __ref[prop] = value, __ref);
	};

	const onEvent = e => {
		e.stopPropagation();
		dispatch(e.type, e.detail);
	};

	let { $$slots = {}, $$scope } = $$props;

	function vime_hls_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			__ref = $$value;
			$$invalidate(10, __ref);
		});
	}

	$$self.$$set = $$props => {
		if ("version" in $$props) $$invalidate(0, version = $$props.version);
		if ("config" in $$props) $$invalidate(1, config = $$props.config);
		if ("crossOrigin" in $$props) $$invalidate(2, crossOrigin = $$props.crossOrigin);
		if ("preload" in $$props) $$invalidate(3, preload = $$props.preload);
		if ("poster" in $$props) $$invalidate(4, poster = $$props.poster);
		if ("controlsList" in $$props) $$invalidate(5, controlsList = $$props.controlsList);
		if ("autoPiP" in $$props) $$invalidate(6, autoPiP = $$props.autoPiP);
		if ("disablePiP" in $$props) $$invalidate(7, disablePiP = $$props.disablePiP);
		if ("disableRemotePlayback" in $$props) $$invalidate(8, disableRemotePlayback = $$props.disableRemotePlayback);
		if ("mediaTitle" in $$props) $$invalidate(9, mediaTitle = $$props.mediaTitle);
		if ("$$scope" in $$props) $$invalidate(14, $$scope = $$props.$$scope);
	};

	return [
		version,
		config,
		crossOrigin,
		preload,
		poster,
		controlsList,
		autoPiP,
		disablePiP,
		disableRemotePlayback,
		mediaTitle,
		__ref,
		onEvent,
		getAdapter,
		getWebComponent,
		$$scope,
		$$slots,
		vime_hls_binding
	];
}

class VimeHls extends SvelteComponent {
  $$prop_def: VimeHlsProps;
  $$events_def: VimeHlsEvents;
  $$slot_def: VimeHlsSlots;

  $on<K extends keyof VimeHlsEvents>(type: K, callback: (e: VimeHlsEvents[K]) => any): () => void {
	  return super.$on(type, callback);
	}

  $set($$props: Partial<VimeHlsProps>): void {
	  super.$set($$props);
	}

	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			version: 0,
			config: 1,
			crossOrigin: 2,
			preload: 3,
			poster: 4,
			controlsList: 5,
			autoPiP: 6,
			disablePiP: 7,
			disableRemotePlayback: 8,
			mediaTitle: 9,
			getAdapter: 12,
			getWebComponent: 13
		});
	}

	
  /**  */
 get getAdapter(): Components.VimeHls["getAdapter"] {
		return this.$$.ctx[12];
	}

	get getWebComponent(): HTMLVimeHlsElement | undefined {
		return this.$$.ctx[13];
	}
}

export default VimeHls;