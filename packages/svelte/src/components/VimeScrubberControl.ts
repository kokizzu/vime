/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import { Components, JSX } from '@vime/core';


interface VimeScrubberControlProps {
  
  /** Whether the timestamp in the tooltip should show the hours unit, even if the time is less than
1 hour (eg: `20:35` -> `00:20:35`). */
  alwaysShowHours?: Components.VimeScrubberControl["alwaysShowHours"]
  
  /** Whether the tooltip should not be displayed. */
  hideTooltip?: Components.VimeScrubberControl["hideTooltip"]
  
  /**  */
  currentTime?: Components.VimeScrubberControl["currentTime"]
  
  /**  */
  duration?: Components.VimeScrubberControl["duration"]
  
  /** Prevents seeking forward/backward by using the Left/Right arrow keys. */
  noKeyboard?: Components.VimeScrubberControl["noKeyboard"]
  
  /**  */
  buffering?: Components.VimeScrubberControl["buffering"]
  
  /**  */
  buffered?: Components.VimeScrubberControl["buffered"]
  
  /**  */
  i18n?: Components.VimeScrubberControl["i18n"]
}

interface VimeScrubberControlEvents {
  
}

interface VimeScrubberControlSlots {
  default: any
}
  
/* generated by Svelte v3.24.1 */
import {
	SvelteComponent,
	binding_callbacks,
	create_slot,
	detach,
	element,
	init,
	insert,
	safe_not_equal,
	set_custom_element_data,
	transition_in,
	transition_out,
	update_slot
} from "svelte/internal";

import { createEventDispatcher, onMount } from "svelte";

function create_fragment(ctx) {
	let vime_scrubber_control;
	let current;
	const default_slot_template = /*$$slots*/ ctx[11].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[10], null);

	return {
		c() {
			vime_scrubber_control = element("vime-scrubber-control");
			if (default_slot) default_slot.c();
			set_custom_element_data(vime_scrubber_control, "always-show-hours", /*alwaysShowHours*/ ctx[0]);
			set_custom_element_data(vime_scrubber_control, "hide-tooltip", /*hideTooltip*/ ctx[1]);
			set_custom_element_data(vime_scrubber_control, "current-time", /*currentTime*/ ctx[2]);
			set_custom_element_data(vime_scrubber_control, "duration", /*duration*/ ctx[3]);
			set_custom_element_data(vime_scrubber_control, "no-keyboard", /*noKeyboard*/ ctx[4]);
			set_custom_element_data(vime_scrubber_control, "buffering", /*buffering*/ ctx[5]);
			set_custom_element_data(vime_scrubber_control, "buffered", /*buffered*/ ctx[6]);
		},
		m(target, anchor) {
			insert(target, vime_scrubber_control, anchor);

			if (default_slot) {
				default_slot.m(vime_scrubber_control, null);
			}

			/*vime_scrubber_control_binding*/ ctx[12](vime_scrubber_control);
			current = true;
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 1024) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[10], dirty, null, null);
				}
			}

			if (!current || dirty & /*alwaysShowHours*/ 1) {
				set_custom_element_data(vime_scrubber_control, "always-show-hours", /*alwaysShowHours*/ ctx[0]);
			}

			if (!current || dirty & /*hideTooltip*/ 2) {
				set_custom_element_data(vime_scrubber_control, "hide-tooltip", /*hideTooltip*/ ctx[1]);
			}

			if (!current || dirty & /*currentTime*/ 4) {
				set_custom_element_data(vime_scrubber_control, "current-time", /*currentTime*/ ctx[2]);
			}

			if (!current || dirty & /*duration*/ 8) {
				set_custom_element_data(vime_scrubber_control, "duration", /*duration*/ ctx[3]);
			}

			if (!current || dirty & /*noKeyboard*/ 16) {
				set_custom_element_data(vime_scrubber_control, "no-keyboard", /*noKeyboard*/ ctx[4]);
			}

			if (!current || dirty & /*buffering*/ 32) {
				set_custom_element_data(vime_scrubber_control, "buffering", /*buffering*/ ctx[5]);
			}

			if (!current || dirty & /*buffered*/ 64) {
				set_custom_element_data(vime_scrubber_control, "buffered", /*buffered*/ ctx[6]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(vime_scrubber_control);
			if (default_slot) default_slot.d(detaching);
			/*vime_scrubber_control_binding*/ ctx[12](null);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let __ref;
	let __mounted = false;
	const dispatch = createEventDispatcher();
	let { alwaysShowHours = undefined } = $$props;
	let { hideTooltip = undefined } = $$props;
	let { currentTime = undefined } = $$props;
	let { duration = undefined } = $$props;
	let { noKeyboard = undefined } = $$props;
	let { buffering = undefined } = $$props;
	let { buffered = undefined } = $$props;
	let { i18n = undefined } = $$props;
	const getWebComponent = () => __ref;

	onMount(() => {
		$$invalidate(13, __mounted = true);
	});

	const setProp = (prop, value) => {
		if (__ref) $$invalidate(7, __ref[prop] = value, __ref);
	};

	const onEvent = e => {
		e.stopPropagation();
		dispatch(e.type, e.detail);
	};

	let { $$slots = {}, $$scope } = $$props;

	function vime_scrubber_control_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			__ref = $$value;
			$$invalidate(7, __ref);
		});
	}

	$$self.$$set = $$props => {
		if ("alwaysShowHours" in $$props) $$invalidate(0, alwaysShowHours = $$props.alwaysShowHours);
		if ("hideTooltip" in $$props) $$invalidate(1, hideTooltip = $$props.hideTooltip);
		if ("currentTime" in $$props) $$invalidate(2, currentTime = $$props.currentTime);
		if ("duration" in $$props) $$invalidate(3, duration = $$props.duration);
		if ("noKeyboard" in $$props) $$invalidate(4, noKeyboard = $$props.noKeyboard);
		if ("buffering" in $$props) $$invalidate(5, buffering = $$props.buffering);
		if ("buffered" in $$props) $$invalidate(6, buffered = $$props.buffered);
		if ("i18n" in $$props) $$invalidate(8, i18n = $$props.i18n);
		if ("$$scope" in $$props) $$invalidate(10, $$scope = $$props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*__mounted, i18n*/ 8448) {
			$: if (__mounted) setProp("i18n", i18n);
		}
	};

	return [
		alwaysShowHours,
		hideTooltip,
		currentTime,
		duration,
		noKeyboard,
		buffering,
		buffered,
		__ref,
		i18n,
		getWebComponent,
		$$scope,
		$$slots,
		vime_scrubber_control_binding
	];
}

class VimeScrubberControl extends SvelteComponent {
  $$prop_def: VimeScrubberControlProps;
  $$events_def: VimeScrubberControlEvents;
  $$slot_def: VimeScrubberControlSlots;

  $on<K extends keyof VimeScrubberControlEvents>(type: K, callback: (e: VimeScrubberControlEvents[K]) => any): () => void {
	  return super.$on(type, callback);
	}

  $set($$props: Partial<VimeScrubberControlProps>): void {
	  super.$set($$props);
	}

	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			alwaysShowHours: 0,
			hideTooltip: 1,
			currentTime: 2,
			duration: 3,
			noKeyboard: 4,
			buffering: 5,
			buffered: 6,
			i18n: 8,
			getWebComponent: 9
		});
	}

	get getWebComponent(): HTMLVimeScrubberControlElement | undefined {
		return this.$$.ctx[9];
	}
}

export default VimeScrubberControl;