/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import { Components, JSX } from '@vime/core';


interface VimeMenuRadioProps {
  
  /** The title of the radio item displayed to the user. */
  label?: Components.VimeMenuRadio["label"]
  
  /** The value associated with this radio item. */
  value?: Components.VimeMenuRadio["value"]
  
  /** Whether the radio item is selected or not. */
  checked?: Components.VimeMenuRadio["checked"]
  
  /** This can provide additional context about the value. For example, if the option is for a set of
video qualities, the badge could describe whether the quality is UHD, HD etc. */
  badge?: Components.VimeMenuRadio["badge"]
  
  /** The URL to an SVG element or fragment to load. */
  checkedIcon?: Components.VimeMenuRadio["checkedIcon"]
}

interface VimeMenuRadioEvents {
  
  /** Emitted when the radio button is selected. */
  vCheck: Parameters<JSX.VimeMenuRadio["onVCheck"]>[0]
}

interface VimeMenuRadioSlots {
  default: any
}
  
/* generated by Svelte v3.24.1 */
import {
	SvelteComponent,
	binding_callbacks,
	create_slot,
	detach,
	element,
	init,
	insert,
	listen,
	safe_not_equal,
	set_custom_element_data,
	transition_in,
	transition_out,
	update_slot
} from "svelte/internal";

import { createEventDispatcher, onMount } from "svelte";

function create_fragment(ctx) {
	let vime_menu_radio;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*$$slots*/ ctx[9].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[8], null);

	return {
		c() {
			vime_menu_radio = element("vime-menu-radio");
			if (default_slot) default_slot.c();
			set_custom_element_data(vime_menu_radio, "label", /*label*/ ctx[0]);
			set_custom_element_data(vime_menu_radio, "value", /*value*/ ctx[1]);
			set_custom_element_data(vime_menu_radio, "checked", /*checked*/ ctx[2]);
			set_custom_element_data(vime_menu_radio, "badge", /*badge*/ ctx[3]);
			set_custom_element_data(vime_menu_radio, "checked-icon", /*checkedIcon*/ ctx[4]);
		},
		m(target, anchor) {
			insert(target, vime_menu_radio, anchor);

			if (default_slot) {
				default_slot.m(vime_menu_radio, null);
			}

			/*vime_menu_radio_binding*/ ctx[10](vime_menu_radio);
			current = true;

			if (!mounted) {
				dispose = listen(vime_menu_radio, "vCheck", /*onEvent*/ ctx[6]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 256) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[8], dirty, null, null);
				}
			}

			if (!current || dirty & /*label*/ 1) {
				set_custom_element_data(vime_menu_radio, "label", /*label*/ ctx[0]);
			}

			if (!current || dirty & /*value*/ 2) {
				set_custom_element_data(vime_menu_radio, "value", /*value*/ ctx[1]);
			}

			if (!current || dirty & /*checked*/ 4) {
				set_custom_element_data(vime_menu_radio, "checked", /*checked*/ ctx[2]);
			}

			if (!current || dirty & /*badge*/ 8) {
				set_custom_element_data(vime_menu_radio, "badge", /*badge*/ ctx[3]);
			}

			if (!current || dirty & /*checkedIcon*/ 16) {
				set_custom_element_data(vime_menu_radio, "checked-icon", /*checkedIcon*/ ctx[4]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(vime_menu_radio);
			if (default_slot) default_slot.d(detaching);
			/*vime_menu_radio_binding*/ ctx[10](null);
			mounted = false;
			dispose();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let __ref;
	let __mounted = false;
	const dispatch = createEventDispatcher();
	let { label } = $$props;
	let { value } = $$props;
	let { checked = undefined } = $$props;
	let { badge = undefined } = $$props;
	let { checkedIcon = undefined } = $$props;
	const getWebComponent = () => __ref;

	onMount(() => {
		__mounted = true;
	});

	const setProp = (prop, value) => {
		if (__ref) $$invalidate(5, __ref[prop] = value, __ref);
	};

	const onEvent = e => {
		e.stopPropagation();
		dispatch(e.type, e.detail);
	};

	let { $$slots = {}, $$scope } = $$props;

	function vime_menu_radio_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			__ref = $$value;
			$$invalidate(5, __ref);
		});
	}

	$$self.$$set = $$props => {
		if ("label" in $$props) $$invalidate(0, label = $$props.label);
		if ("value" in $$props) $$invalidate(1, value = $$props.value);
		if ("checked" in $$props) $$invalidate(2, checked = $$props.checked);
		if ("badge" in $$props) $$invalidate(3, badge = $$props.badge);
		if ("checkedIcon" in $$props) $$invalidate(4, checkedIcon = $$props.checkedIcon);
		if ("$$scope" in $$props) $$invalidate(8, $$scope = $$props.$$scope);
	};

	return [
		label,
		value,
		checked,
		badge,
		checkedIcon,
		__ref,
		onEvent,
		getWebComponent,
		$$scope,
		$$slots,
		vime_menu_radio_binding
	];
}

class VimeMenuRadio extends SvelteComponent {
  $$prop_def: VimeMenuRadioProps;
  $$events_def: VimeMenuRadioEvents;
  $$slot_def: VimeMenuRadioSlots;

  $on<K extends keyof VimeMenuRadioEvents>(type: K, callback: (e: VimeMenuRadioEvents[K]) => any): () => void {
	  return super.$on(type, callback);
	}

  $set($$props: Partial<VimeMenuRadioProps>): void {
	  super.$set($$props);
	}

	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			label: 0,
			value: 1,
			checked: 2,
			badge: 3,
			checkedIcon: 4,
			getWebComponent: 7
		});
	}

	get getWebComponent(): HTMLVimeMenuRadioElement | undefined {
		return this.$$.ctx[7];
	}
}

export default VimeMenuRadio;