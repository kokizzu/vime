/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import { Components, JSX } from '@vime/core';


interface VimeMenuProps {
  
  /** Whether the menu is open/visible. */
  active?: Components.VimeMenu["active"]
  
  /** The `id` attribute of the menu. */
  identifier?: Components.VimeMenu["identifier"]
  
  /** The `id` attribute value of the control responsible for opening/closing this menu. */
  controller?: Components.VimeMenu["controller"]
}

interface VimeMenuEvents {
  
  /** Emitted when the menu is open/active. */
  vOpen: Parameters<JSX.VimeMenu["onVOpen"]>[0]
  
  /** Emitted when the menu has closed/is not active. */
  vClose: Parameters<JSX.VimeMenu["onVClose"]>[0]
  
  /** Emitted when the menu items present changes. */
  vMenuItemsChange: Parameters<JSX.VimeMenu["onVMenuItemsChange"]>[0]
  
  /** Emitted when the currently focused menu item changes. */
  vFocusMenuItemChange: Parameters<JSX.VimeMenu["onVFocusMenuItemChange"]>[0]
}

interface VimeMenuSlots {
  default: any
}
  
/* generated by Svelte v3.24.1 */
import {
	SvelteComponent,
	binding_callbacks,
	create_slot,
	detach,
	element,
	init,
	insert,
	listen,
	run_all,
	safe_not_equal,
	set_custom_element_data,
	transition_in,
	transition_out,
	update_slot
} from "svelte/internal";

import { createEventDispatcher, onMount } from "svelte";

function create_fragment(ctx) {
	let vime_menu;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*$$slots*/ ctx[10].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[9], null);

	return {
		c() {
			vime_menu = element("vime-menu");
			if (default_slot) default_slot.c();
			set_custom_element_data(vime_menu, "active", /*active*/ ctx[0]);
			set_custom_element_data(vime_menu, "identifier", /*identifier*/ ctx[1]);
			set_custom_element_data(vime_menu, "controller", /*controller*/ ctx[2]);
		},
		m(target, anchor) {
			insert(target, vime_menu, anchor);

			if (default_slot) {
				default_slot.m(vime_menu, null);
			}

			/*vime_menu_binding*/ ctx[11](vime_menu);
			current = true;

			if (!mounted) {
				dispose = [
					listen(vime_menu, "vOpen", /*onEvent*/ ctx[4]),
					listen(vime_menu, "vClose", /*onEvent*/ ctx[4]),
					listen(vime_menu, "vMenuItemsChange", /*onEvent*/ ctx[4]),
					listen(vime_menu, "vFocusMenuItemChange", /*onEvent*/ ctx[4])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 512) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[9], dirty, null, null);
				}
			}

			if (!current || dirty & /*active*/ 1) {
				set_custom_element_data(vime_menu, "active", /*active*/ ctx[0]);
			}

			if (!current || dirty & /*identifier*/ 2) {
				set_custom_element_data(vime_menu, "identifier", /*identifier*/ ctx[1]);
			}

			if (!current || dirty & /*controller*/ 4) {
				set_custom_element_data(vime_menu, "controller", /*controller*/ ctx[2]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(vime_menu);
			if (default_slot) default_slot.d(detaching);
			/*vime_menu_binding*/ ctx[11](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let __ref;
	let __mounted = false;
	const dispatch = createEventDispatcher();
	let { active = undefined } = $$props;
	let { identifier } = $$props;
	let { controller } = $$props;
	const getController = (...args) => __ref.getController(...args);
	const getFocusedMenuItem = (...args) => __ref.getFocusedMenuItem(...args);
	const focusOnOpen = (...args) => __ref.focusOnOpen(...args);
	const getWebComponent = () => __ref;

	onMount(() => {
		__mounted = true;
	});

	const setProp = (prop, value) => {
		if (__ref) $$invalidate(3, __ref[prop] = value, __ref);
	};

	const onEvent = e => {
		e.stopPropagation();
		dispatch(e.type, e.detail);
	};

	let { $$slots = {}, $$scope } = $$props;

	function vime_menu_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			__ref = $$value;
			$$invalidate(3, __ref);
		});
	}

	$$self.$$set = $$props => {
		if ("active" in $$props) $$invalidate(0, active = $$props.active);
		if ("identifier" in $$props) $$invalidate(1, identifier = $$props.identifier);
		if ("controller" in $$props) $$invalidate(2, controller = $$props.controller);
		if ("$$scope" in $$props) $$invalidate(9, $$scope = $$props.$$scope);
	};

	return [
		active,
		identifier,
		controller,
		__ref,
		onEvent,
		getController,
		getFocusedMenuItem,
		focusOnOpen,
		getWebComponent,
		$$scope,
		$$slots,
		vime_menu_binding
	];
}

class VimeMenu extends SvelteComponent {
  $$prop_def: VimeMenuProps;
  $$events_def: VimeMenuEvents;
  $$slot_def: VimeMenuSlots;

  $on<K extends keyof VimeMenuEvents>(type: K, callback: (e: VimeMenuEvents[K]) => any): () => void {
	  return super.$on(type, callback);
	}

  $set($$props: Partial<VimeMenuProps>): void {
	  super.$set($$props);
	}

	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			active: 0,
			identifier: 1,
			controller: 2,
			getController: 5,
			getFocusedMenuItem: 6,
			focusOnOpen: 7,
			getWebComponent: 8
		});
	}

	
  /** Returns the controller responsible for opening/closing this menu. */
 get getController(): Components.VimeMenu["getController"] {
		return this.$$.ctx[5];
	}

	
  /** Returns the currently focused menu item. */
 get getFocusedMenuItem(): Components.VimeMenu["getFocusedMenuItem"] {
		return this.$$.ctx[6];
	}

	
  /** This should be called directly before opening the menu to set the keyboard focus on it. This
is a one-time operation and needs to be called everytime prior to opening the menu. */
 get focusOnOpen(): Components.VimeMenu["focusOnOpen"] {
		return this.$$.ctx[7];
	}

	get getWebComponent(): HTMLVimeMenuElement | undefined {
		return this.$$.ctx[8];
	}
}

export default VimeMenu;