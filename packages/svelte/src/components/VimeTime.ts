/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import { Components, JSX } from '@vime/core';


interface VimeTimeProps {
  
  /** The `aria-label` property of the time. */
  label?: Components.VimeTime["label"]
  
  /** The length of time in seconds. */
  seconds?: Components.VimeTime["seconds"]
  
  /** Whether the time should always show the hours unit, even if the time is less than
1 hour (eg: `20:35` -> `00:20:35`). */
  alwaysShowHours?: Components.VimeTime["alwaysShowHours"]
}

interface VimeTimeEvents {
  
}

interface VimeTimeSlots {
  default: any
}
  
/* generated by Svelte v3.24.1 */
import {
	SvelteComponent,
	binding_callbacks,
	create_slot,
	detach,
	element,
	init,
	insert,
	safe_not_equal,
	set_custom_element_data,
	transition_in,
	transition_out,
	update_slot
} from "svelte/internal";

import { createEventDispatcher, onMount } from "svelte";

function create_fragment(ctx) {
	let vime_time;
	let current;
	const default_slot_template = /*$$slots*/ ctx[6].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[5], null);

	return {
		c() {
			vime_time = element("vime-time");
			if (default_slot) default_slot.c();
			set_custom_element_data(vime_time, "label", /*label*/ ctx[0]);
			set_custom_element_data(vime_time, "seconds", /*seconds*/ ctx[1]);
			set_custom_element_data(vime_time, "always-show-hours", /*alwaysShowHours*/ ctx[2]);
		},
		m(target, anchor) {
			insert(target, vime_time, anchor);

			if (default_slot) {
				default_slot.m(vime_time, null);
			}

			/*vime_time_binding*/ ctx[7](vime_time);
			current = true;
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 32) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[5], dirty, null, null);
				}
			}

			if (!current || dirty & /*label*/ 1) {
				set_custom_element_data(vime_time, "label", /*label*/ ctx[0]);
			}

			if (!current || dirty & /*seconds*/ 2) {
				set_custom_element_data(vime_time, "seconds", /*seconds*/ ctx[1]);
			}

			if (!current || dirty & /*alwaysShowHours*/ 4) {
				set_custom_element_data(vime_time, "always-show-hours", /*alwaysShowHours*/ ctx[2]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(vime_time);
			if (default_slot) default_slot.d(detaching);
			/*vime_time_binding*/ ctx[7](null);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let __ref;
	let __mounted = false;
	const dispatch = createEventDispatcher();
	let { label } = $$props;
	let { seconds = undefined } = $$props;
	let { alwaysShowHours = undefined } = $$props;
	const getWebComponent = () => __ref;

	onMount(() => {
		__mounted = true;
	});

	const setProp = (prop, value) => {
		if (__ref) $$invalidate(3, __ref[prop] = value, __ref);
	};

	const onEvent = e => {
		e.stopPropagation();
		dispatch(e.type, e.detail);
	};

	let { $$slots = {}, $$scope } = $$props;

	function vime_time_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			__ref = $$value;
			$$invalidate(3, __ref);
		});
	}

	$$self.$$set = $$props => {
		if ("label" in $$props) $$invalidate(0, label = $$props.label);
		if ("seconds" in $$props) $$invalidate(1, seconds = $$props.seconds);
		if ("alwaysShowHours" in $$props) $$invalidate(2, alwaysShowHours = $$props.alwaysShowHours);
		if ("$$scope" in $$props) $$invalidate(5, $$scope = $$props.$$scope);
	};

	return [
		label,
		seconds,
		alwaysShowHours,
		__ref,
		getWebComponent,
		$$scope,
		$$slots,
		vime_time_binding
	];
}

class VimeTime extends SvelteComponent {
  $$prop_def: VimeTimeProps;
  $$events_def: VimeTimeEvents;
  $$slot_def: VimeTimeSlots;

  $on<K extends keyof VimeTimeEvents>(type: K, callback: (e: VimeTimeEvents[K]) => any): () => void {
	  return super.$on(type, callback);
	}

  $set($$props: Partial<VimeTimeProps>): void {
	  super.$set($$props);
	}

	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			label: 0,
			seconds: 1,
			alwaysShowHours: 2,
			getWebComponent: 4
		});
	}

	get getWebComponent(): HTMLVimeTimeElement | undefined {
		return this.$$.ctx[4];
	}
}

export default VimeTime;