/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import { Components, JSX } from '@vime/core';


interface VimeAudioProps {
  
  /**  */
  willAttach?: Components.VimeAudio["willAttach"]
  
  /** Whether to use CORS to fetch the related image. See
[MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/crossorigin) for more
information. */
  crossOrigin?: Components.VimeAudio["crossOrigin"]
  
  /** Provides a hint to the browser about what the author thinks will lead to the best user
experience with regards to what content is loaded before the video is played. See
[MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video#attr-preload) for more
information. */
  preload?: Components.VimeAudio["preload"]
  
  /** **EXPERIMENTAL:** Whether to disable the capability of remote playback in devices that are
attached using wired (HDMI, DVI, etc.) and wireless technologies
(Miracast, Chromecast, DLNA, AirPlay, etc). */
  disableRemotePlayback?: Components.VimeAudio["disableRemotePlayback"]
  
  /** The title of the current media. */
  mediaTitle?: Components.VimeAudio["mediaTitle"]
}

interface VimeAudioEvents {
  
}

interface VimeAudioSlots {
  default: any
}
  
/* generated by Svelte v3.24.1 */
import {
	SvelteComponent,
	binding_callbacks,
	create_slot,
	detach,
	element,
	init,
	insert,
	safe_not_equal,
	set_custom_element_data,
	transition_in,
	transition_out,
	update_slot
} from "svelte/internal";

import { createEventDispatcher, onMount } from "svelte";

function create_fragment(ctx) {
	let vime_audio;
	let current;
	const default_slot_template = /*$$slots*/ ctx[9].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[8], null);

	return {
		c() {
			vime_audio = element("vime-audio");
			if (default_slot) default_slot.c();
			set_custom_element_data(vime_audio, "will-attach", /*willAttach*/ ctx[0]);
			set_custom_element_data(vime_audio, "cross-origin", /*crossOrigin*/ ctx[1]);
			set_custom_element_data(vime_audio, "preload", /*preload*/ ctx[2]);
			set_custom_element_data(vime_audio, "disable-remote-playback", /*disableRemotePlayback*/ ctx[3]);
			set_custom_element_data(vime_audio, "media-title", /*mediaTitle*/ ctx[4]);
		},
		m(target, anchor) {
			insert(target, vime_audio, anchor);

			if (default_slot) {
				default_slot.m(vime_audio, null);
			}

			/*vime_audio_binding*/ ctx[10](vime_audio);
			current = true;
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 256) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[8], dirty, null, null);
				}
			}

			if (!current || dirty & /*willAttach*/ 1) {
				set_custom_element_data(vime_audio, "will-attach", /*willAttach*/ ctx[0]);
			}

			if (!current || dirty & /*crossOrigin*/ 2) {
				set_custom_element_data(vime_audio, "cross-origin", /*crossOrigin*/ ctx[1]);
			}

			if (!current || dirty & /*preload*/ 4) {
				set_custom_element_data(vime_audio, "preload", /*preload*/ ctx[2]);
			}

			if (!current || dirty & /*disableRemotePlayback*/ 8) {
				set_custom_element_data(vime_audio, "disable-remote-playback", /*disableRemotePlayback*/ ctx[3]);
			}

			if (!current || dirty & /*mediaTitle*/ 16) {
				set_custom_element_data(vime_audio, "media-title", /*mediaTitle*/ ctx[4]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(vime_audio);
			if (default_slot) default_slot.d(detaching);
			/*vime_audio_binding*/ ctx[10](null);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let __ref;
	let __mounted = false;
	const dispatch = createEventDispatcher();
	let { willAttach = undefined } = $$props;
	let { crossOrigin = undefined } = $$props;
	let { preload = undefined } = $$props;
	let { disableRemotePlayback = undefined } = $$props;
	let { mediaTitle = undefined } = $$props;
	const getAdapter = (...args) => __ref.getAdapter(...args);
	const getWebComponent = () => __ref;

	onMount(() => {
		__mounted = true;
	});

	const setProp = (prop, value) => {
		if (__ref) $$invalidate(5, __ref[prop] = value, __ref);
	};

	const onEvent = e => {
		e.stopPropagation();
		dispatch(e.type, e.detail);
	};

	let { $$slots = {}, $$scope } = $$props;

	function vime_audio_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			__ref = $$value;
			$$invalidate(5, __ref);
		});
	}

	$$self.$$set = $$props => {
		if ("willAttach" in $$props) $$invalidate(0, willAttach = $$props.willAttach);
		if ("crossOrigin" in $$props) $$invalidate(1, crossOrigin = $$props.crossOrigin);
		if ("preload" in $$props) $$invalidate(2, preload = $$props.preload);
		if ("disableRemotePlayback" in $$props) $$invalidate(3, disableRemotePlayback = $$props.disableRemotePlayback);
		if ("mediaTitle" in $$props) $$invalidate(4, mediaTitle = $$props.mediaTitle);
		if ("$$scope" in $$props) $$invalidate(8, $$scope = $$props.$$scope);
	};

	return [
		willAttach,
		crossOrigin,
		preload,
		disableRemotePlayback,
		mediaTitle,
		__ref,
		getAdapter,
		getWebComponent,
		$$scope,
		$$slots,
		vime_audio_binding
	];
}

class VimeAudio extends SvelteComponent {
  $$prop_def: VimeAudioProps;
  $$events_def: VimeAudioEvents;
  $$slot_def: VimeAudioSlots;

  $on<K extends keyof VimeAudioEvents>(type: K, callback: (e: VimeAudioEvents[K]) => any): () => void {
	  return super.$on(type, callback);
	}

  $set($$props: Partial<VimeAudioProps>): void {
	  super.$set($$props);
	}

	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			willAttach: 0,
			crossOrigin: 1,
			preload: 2,
			disableRemotePlayback: 3,
			mediaTitle: 4,
			getAdapter: 6,
			getWebComponent: 7
		});
	}

	
  /**  */
 get getAdapter(): Components.VimeAudio["getAdapter"] {
		return this.$$.ctx[6];
	}

	get getWebComponent(): HTMLVimeAudioElement | undefined {
		return this.$$.ctx[7];
	}
}

export default VimeAudio;