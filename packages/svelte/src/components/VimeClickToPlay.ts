/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import { Components, JSX } from '@vime/core';


interface VimeClickToPlayProps {
  
  /** By default this is disabled on mobile to not interfere with playback, set this to `true` to
enable it. */
  useOnMobile?: Components.VimeClickToPlay["useOnMobile"]
  
  /**  */
  paused?: Components.VimeClickToPlay["paused"]
  
  /**  */
  isVideoView?: Components.VimeClickToPlay["isVideoView"]
}

interface VimeClickToPlayEvents {
  
}

interface VimeClickToPlaySlots {
  default: any
}
  
/* generated by Svelte v3.24.1 */
import {
	SvelteComponent,
	binding_callbacks,
	create_slot,
	detach,
	element,
	init,
	insert,
	safe_not_equal,
	set_custom_element_data,
	transition_in,
	transition_out,
	update_slot
} from "svelte/internal";

import { createEventDispatcher, onMount } from "svelte";

function create_fragment(ctx) {
	let vime_click_to_play;
	let current;
	const default_slot_template = /*$$slots*/ ctx[6].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[5], null);

	return {
		c() {
			vime_click_to_play = element("vime-click-to-play");
			if (default_slot) default_slot.c();
			set_custom_element_data(vime_click_to_play, "use-on-mobile", /*useOnMobile*/ ctx[0]);
			set_custom_element_data(vime_click_to_play, "paused", /*paused*/ ctx[1]);
			set_custom_element_data(vime_click_to_play, "is-video-view", /*isVideoView*/ ctx[2]);
		},
		m(target, anchor) {
			insert(target, vime_click_to_play, anchor);

			if (default_slot) {
				default_slot.m(vime_click_to_play, null);
			}

			/*vime_click_to_play_binding*/ ctx[7](vime_click_to_play);
			current = true;
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 32) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[5], dirty, null, null);
				}
			}

			if (!current || dirty & /*useOnMobile*/ 1) {
				set_custom_element_data(vime_click_to_play, "use-on-mobile", /*useOnMobile*/ ctx[0]);
			}

			if (!current || dirty & /*paused*/ 2) {
				set_custom_element_data(vime_click_to_play, "paused", /*paused*/ ctx[1]);
			}

			if (!current || dirty & /*isVideoView*/ 4) {
				set_custom_element_data(vime_click_to_play, "is-video-view", /*isVideoView*/ ctx[2]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(vime_click_to_play);
			if (default_slot) default_slot.d(detaching);
			/*vime_click_to_play_binding*/ ctx[7](null);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let __ref;
	let __mounted = false;
	const dispatch = createEventDispatcher();
	let { useOnMobile = undefined } = $$props;
	let { paused = undefined } = $$props;
	let { isVideoView = undefined } = $$props;
	const getWebComponent = () => __ref;

	onMount(() => {
		__mounted = true;
	});

	const setProp = (prop, value) => {
		if (__ref) $$invalidate(3, __ref[prop] = value, __ref);
	};

	const onEvent = e => {
		e.stopPropagation();
		dispatch(e.type, e.detail);
	};

	let { $$slots = {}, $$scope } = $$props;

	function vime_click_to_play_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			__ref = $$value;
			$$invalidate(3, __ref);
		});
	}

	$$self.$$set = $$props => {
		if ("useOnMobile" in $$props) $$invalidate(0, useOnMobile = $$props.useOnMobile);
		if ("paused" in $$props) $$invalidate(1, paused = $$props.paused);
		if ("isVideoView" in $$props) $$invalidate(2, isVideoView = $$props.isVideoView);
		if ("$$scope" in $$props) $$invalidate(5, $$scope = $$props.$$scope);
	};

	return [
		useOnMobile,
		paused,
		isVideoView,
		__ref,
		getWebComponent,
		$$scope,
		$$slots,
		vime_click_to_play_binding
	];
}

class VimeClickToPlay extends SvelteComponent {
  $$prop_def: VimeClickToPlayProps;
  $$events_def: VimeClickToPlayEvents;
  $$slot_def: VimeClickToPlaySlots;

  $on<K extends keyof VimeClickToPlayEvents>(type: K, callback: (e: VimeClickToPlayEvents[K]) => any): () => void {
	  return super.$on(type, callback);
	}

  $set($$props: Partial<VimeClickToPlayProps>): void {
	  super.$set($$props);
	}

	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			useOnMobile: 0,
			paused: 1,
			isVideoView: 2,
			getWebComponent: 4
		});
	}

	get getWebComponent(): HTMLVimeClickToPlayElement | undefined {
		return this.$$.ctx[4];
	}
}

export default VimeClickToPlay;