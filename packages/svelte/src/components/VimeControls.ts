/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import { Components, JSX } from '@vime/core';


interface VimeControlsProps {
  
  /** Whether the controls are visible or not. */
  hidden?: Components.VimeControls["hidden"]
  
  /** Whether the controls container should be 100% width. This has no effect if the view is of
type `audio`. */
  fullWidth?: Components.VimeControls["fullWidth"]
  
  /** Whether the controls container should be 100% height. This has no effect if the view is of
type `audio`. */
  fullHeight?: Components.VimeControls["fullHeight"]
  
  /** Sets the `flex-direction` property that manages the direction in which the controls are layed
out. */
  direction?: Components.VimeControls["direction"]
  
  /** Sets the `align-items` flex property that aligns the individual controls on the cross-axis. */
  align?: Components.VimeControls["align"]
  
  /** Sets the `justify-content` flex property that aligns the individual controls on the main-axis. */
  justify?: Components.VimeControls["justify"]
  
  /** Pins the controls to the defined position inside the video player. This has no effect when
the view is of type `audio`. */
  pin?: Components.VimeControls["pin"]
  
  /** The length in milliseconds that the controls are active for before fading out. Audio players
are not effected by this prop. */
  activeDuration?: Components.VimeControls["activeDuration"]
  
  /** Whether the controls should wait for playback to start before being shown. Audio players
are not effected by this prop. */
  waitForPlaybackStart?: Components.VimeControls["waitForPlaybackStart"]
  
  /** Whether the controls should show/hide when paused. Audio players are not effected by this prop. */
  hideWhenPaused?: Components.VimeControls["hideWhenPaused"]
  
  /** Whether the controls should hide when the mouse leaves the player. Audio players are not
effected by this prop. */
  hideOnMouseLeave?: Components.VimeControls["hideOnMouseLeave"]
  
  /**  */
  isAudioView?: Components.VimeControls["isAudioView"]
  
  /**  */
  isSettingsActive?: Components.VimeControls["isSettingsActive"]
  
  /**  */
  playbackReady?: Components.VimeControls["playbackReady"]
  
  /**  */
  isControlsActive?: Components.VimeControls["isControlsActive"]
  
  /**  */
  paused?: Components.VimeControls["paused"]
  
  /**  */
  playbackStarted?: Components.VimeControls["playbackStarted"]
}

interface VimeControlsEvents {
  
}

interface VimeControlsSlots {
  default: any
}
  
/* generated by Svelte v3.24.1 */
import {
	SvelteComponent,
	binding_callbacks,
	create_slot,
	detach,
	element,
	init,
	insert,
	safe_not_equal,
	set_custom_element_data,
	transition_in,
	transition_out,
	update_slot
} from "svelte/internal";

import { createEventDispatcher, onMount } from "svelte";

function create_fragment(ctx) {
	let vime_controls;
	let current;
	const default_slot_template = /*$$slots*/ ctx[20].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[19], null);

	return {
		c() {
			vime_controls = element("vime-controls");
			if (default_slot) default_slot.c();
			vime_controls.hidden = /*hidden*/ ctx[0];
			set_custom_element_data(vime_controls, "full-width", /*fullWidth*/ ctx[1]);
			set_custom_element_data(vime_controls, "full-height", /*fullHeight*/ ctx[2]);
			set_custom_element_data(vime_controls, "direction", /*direction*/ ctx[3]);
			set_custom_element_data(vime_controls, "align", /*align*/ ctx[4]);
			set_custom_element_data(vime_controls, "justify", /*justify*/ ctx[5]);
			set_custom_element_data(vime_controls, "pin", /*pin*/ ctx[6]);
			set_custom_element_data(vime_controls, "active-duration", /*activeDuration*/ ctx[7]);
			set_custom_element_data(vime_controls, "wait-for-playback-start", /*waitForPlaybackStart*/ ctx[8]);
			set_custom_element_data(vime_controls, "hide-when-paused", /*hideWhenPaused*/ ctx[9]);
			set_custom_element_data(vime_controls, "hide-on-mouse-leave", /*hideOnMouseLeave*/ ctx[10]);
			set_custom_element_data(vime_controls, "is-audio-view", /*isAudioView*/ ctx[11]);
			set_custom_element_data(vime_controls, "is-settings-active", /*isSettingsActive*/ ctx[12]);
			set_custom_element_data(vime_controls, "playback-ready", /*playbackReady*/ ctx[13]);
			set_custom_element_data(vime_controls, "is-controls-active", /*isControlsActive*/ ctx[14]);
			set_custom_element_data(vime_controls, "paused", /*paused*/ ctx[15]);
			set_custom_element_data(vime_controls, "playback-started", /*playbackStarted*/ ctx[16]);
		},
		m(target, anchor) {
			insert(target, vime_controls, anchor);

			if (default_slot) {
				default_slot.m(vime_controls, null);
			}

			/*vime_controls_binding*/ ctx[21](vime_controls);
			current = true;
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 524288) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[19], dirty, null, null);
				}
			}

			if (!current || dirty & /*hidden*/ 1) {
				vime_controls.hidden = /*hidden*/ ctx[0];
			}

			if (!current || dirty & /*fullWidth*/ 2) {
				set_custom_element_data(vime_controls, "full-width", /*fullWidth*/ ctx[1]);
			}

			if (!current || dirty & /*fullHeight*/ 4) {
				set_custom_element_data(vime_controls, "full-height", /*fullHeight*/ ctx[2]);
			}

			if (!current || dirty & /*direction*/ 8) {
				set_custom_element_data(vime_controls, "direction", /*direction*/ ctx[3]);
			}

			if (!current || dirty & /*align*/ 16) {
				set_custom_element_data(vime_controls, "align", /*align*/ ctx[4]);
			}

			if (!current || dirty & /*justify*/ 32) {
				set_custom_element_data(vime_controls, "justify", /*justify*/ ctx[5]);
			}

			if (!current || dirty & /*pin*/ 64) {
				set_custom_element_data(vime_controls, "pin", /*pin*/ ctx[6]);
			}

			if (!current || dirty & /*activeDuration*/ 128) {
				set_custom_element_data(vime_controls, "active-duration", /*activeDuration*/ ctx[7]);
			}

			if (!current || dirty & /*waitForPlaybackStart*/ 256) {
				set_custom_element_data(vime_controls, "wait-for-playback-start", /*waitForPlaybackStart*/ ctx[8]);
			}

			if (!current || dirty & /*hideWhenPaused*/ 512) {
				set_custom_element_data(vime_controls, "hide-when-paused", /*hideWhenPaused*/ ctx[9]);
			}

			if (!current || dirty & /*hideOnMouseLeave*/ 1024) {
				set_custom_element_data(vime_controls, "hide-on-mouse-leave", /*hideOnMouseLeave*/ ctx[10]);
			}

			if (!current || dirty & /*isAudioView*/ 2048) {
				set_custom_element_data(vime_controls, "is-audio-view", /*isAudioView*/ ctx[11]);
			}

			if (!current || dirty & /*isSettingsActive*/ 4096) {
				set_custom_element_data(vime_controls, "is-settings-active", /*isSettingsActive*/ ctx[12]);
			}

			if (!current || dirty & /*playbackReady*/ 8192) {
				set_custom_element_data(vime_controls, "playback-ready", /*playbackReady*/ ctx[13]);
			}

			if (!current || dirty & /*isControlsActive*/ 16384) {
				set_custom_element_data(vime_controls, "is-controls-active", /*isControlsActive*/ ctx[14]);
			}

			if (!current || dirty & /*paused*/ 32768) {
				set_custom_element_data(vime_controls, "paused", /*paused*/ ctx[15]);
			}

			if (!current || dirty & /*playbackStarted*/ 65536) {
				set_custom_element_data(vime_controls, "playback-started", /*playbackStarted*/ ctx[16]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(vime_controls);
			if (default_slot) default_slot.d(detaching);
			/*vime_controls_binding*/ ctx[21](null);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let __ref;
	let __mounted = false;
	const dispatch = createEventDispatcher();
	let { hidden = undefined } = $$props;
	let { fullWidth = undefined } = $$props;
	let { fullHeight = undefined } = $$props;
	let { direction = undefined } = $$props;
	let { align = undefined } = $$props;
	let { justify = undefined } = $$props;
	let { pin = undefined } = $$props;
	let { activeDuration = undefined } = $$props;
	let { waitForPlaybackStart = undefined } = $$props;
	let { hideWhenPaused = undefined } = $$props;
	let { hideOnMouseLeave = undefined } = $$props;
	let { isAudioView = undefined } = $$props;
	let { isSettingsActive = undefined } = $$props;
	let { playbackReady = undefined } = $$props;
	let { isControlsActive = undefined } = $$props;
	let { paused = undefined } = $$props;
	let { playbackStarted = undefined } = $$props;
	const getWebComponent = () => __ref;

	onMount(() => {
		__mounted = true;
	});

	const setProp = (prop, value) => {
		if (__ref) $$invalidate(17, __ref[prop] = value, __ref);
	};

	const onEvent = e => {
		e.stopPropagation();
		dispatch(e.type, e.detail);
	};

	let { $$slots = {}, $$scope } = $$props;

	function vime_controls_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			__ref = $$value;
			$$invalidate(17, __ref);
		});
	}

	$$self.$$set = $$props => {
		if ("hidden" in $$props) $$invalidate(0, hidden = $$props.hidden);
		if ("fullWidth" in $$props) $$invalidate(1, fullWidth = $$props.fullWidth);
		if ("fullHeight" in $$props) $$invalidate(2, fullHeight = $$props.fullHeight);
		if ("direction" in $$props) $$invalidate(3, direction = $$props.direction);
		if ("align" in $$props) $$invalidate(4, align = $$props.align);
		if ("justify" in $$props) $$invalidate(5, justify = $$props.justify);
		if ("pin" in $$props) $$invalidate(6, pin = $$props.pin);
		if ("activeDuration" in $$props) $$invalidate(7, activeDuration = $$props.activeDuration);
		if ("waitForPlaybackStart" in $$props) $$invalidate(8, waitForPlaybackStart = $$props.waitForPlaybackStart);
		if ("hideWhenPaused" in $$props) $$invalidate(9, hideWhenPaused = $$props.hideWhenPaused);
		if ("hideOnMouseLeave" in $$props) $$invalidate(10, hideOnMouseLeave = $$props.hideOnMouseLeave);
		if ("isAudioView" in $$props) $$invalidate(11, isAudioView = $$props.isAudioView);
		if ("isSettingsActive" in $$props) $$invalidate(12, isSettingsActive = $$props.isSettingsActive);
		if ("playbackReady" in $$props) $$invalidate(13, playbackReady = $$props.playbackReady);
		if ("isControlsActive" in $$props) $$invalidate(14, isControlsActive = $$props.isControlsActive);
		if ("paused" in $$props) $$invalidate(15, paused = $$props.paused);
		if ("playbackStarted" in $$props) $$invalidate(16, playbackStarted = $$props.playbackStarted);
		if ("$$scope" in $$props) $$invalidate(19, $$scope = $$props.$$scope);
	};

	return [
		hidden,
		fullWidth,
		fullHeight,
		direction,
		align,
		justify,
		pin,
		activeDuration,
		waitForPlaybackStart,
		hideWhenPaused,
		hideOnMouseLeave,
		isAudioView,
		isSettingsActive,
		playbackReady,
		isControlsActive,
		paused,
		playbackStarted,
		__ref,
		getWebComponent,
		$$scope,
		$$slots,
		vime_controls_binding
	];
}

class VimeControls extends SvelteComponent {
  $$prop_def: VimeControlsProps;
  $$events_def: VimeControlsEvents;
  $$slot_def: VimeControlsSlots;

  $on<K extends keyof VimeControlsEvents>(type: K, callback: (e: VimeControlsEvents[K]) => any): () => void {
	  return super.$on(type, callback);
	}

  $set($$props: Partial<VimeControlsProps>): void {
	  super.$set($$props);
	}

	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			hidden: 0,
			fullWidth: 1,
			fullHeight: 2,
			direction: 3,
			align: 4,
			justify: 5,
			pin: 6,
			activeDuration: 7,
			waitForPlaybackStart: 8,
			hideWhenPaused: 9,
			hideOnMouseLeave: 10,
			isAudioView: 11,
			isSettingsActive: 12,
			playbackReady: 13,
			isControlsActive: 14,
			paused: 15,
			playbackStarted: 16,
			getWebComponent: 18
		});
	}

	get getWebComponent(): HTMLVimeControlsElement | undefined {
		return this.$$.ctx[18];
	}
}

export default VimeControls;