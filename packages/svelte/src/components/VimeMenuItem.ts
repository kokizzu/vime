/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import { Components, JSX } from '@vime/core';


interface VimeMenuItemProps {
  
  /** The `id` attribute of the item. */
  identifier?: Components.VimeMenuItem["identifier"]
  
  /** Whether the item is displayed or not. */
  hidden?: Components.VimeMenuItem["hidden"]
  
  /** The label/title of the item. */
  label?: Components.VimeMenuItem["label"]
  
  /** If the item has a popup menu, then this should be the `id` of said menu. Sets the
`aria-controls` property. */
  menu?: Components.VimeMenuItem["menu"]
  
  /** If the item has a popup menu, this indicates whether the menu is open or not. Sets the
`aria-expanded` property. */
  expanded?: Components.VimeMenuItem["expanded"]
  
  /** If this item is to behave as a radio button, then this property determines whether the
radio is selected or not. Sets the `aria-checked` property. */
  checked?: Components.VimeMenuItem["checked"]
  
  /** This can provide additional context about some underlying state of the item. For example, if
the menu item opens/closes a submenu with options, the hint could be the currently selected
option. */
  hint?: Components.VimeMenuItem["hint"]
  
  /** This can provide additional context about the value of a menu item. For example, if the item
is a radio button for a set of video qualities, the badge could describe whether the quality
is UHD, HD etc. */
  badge?: Components.VimeMenuItem["badge"]
  
  /** The URL to an SVG element or fragment to load. */
  checkedIcon?: Components.VimeMenuItem["checkedIcon"]
  
  /**  */
  isTouch?: Components.VimeMenuItem["isTouch"]
}

interface VimeMenuItemEvents {
  
}

interface VimeMenuItemSlots {
  default: any
}
  
/* generated by Svelte v3.24.1 */
import {
	SvelteComponent,
	binding_callbacks,
	create_slot,
	detach,
	element,
	init,
	insert,
	safe_not_equal,
	set_custom_element_data,
	transition_in,
	transition_out,
	update_slot
} from "svelte/internal";

import { createEventDispatcher, onMount } from "svelte";

function create_fragment(ctx) {
	let vime_menu_item;
	let current;
	const default_slot_template = /*$$slots*/ ctx[13].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[12], null);

	return {
		c() {
			vime_menu_item = element("vime-menu-item");
			if (default_slot) default_slot.c();
			set_custom_element_data(vime_menu_item, "identifier", /*identifier*/ ctx[0]);
			vime_menu_item.hidden = /*hidden*/ ctx[1];
			set_custom_element_data(vime_menu_item, "label", /*label*/ ctx[2]);
			set_custom_element_data(vime_menu_item, "menu", /*menu*/ ctx[3]);
			set_custom_element_data(vime_menu_item, "expanded", /*expanded*/ ctx[4]);
			set_custom_element_data(vime_menu_item, "checked", /*checked*/ ctx[5]);
			set_custom_element_data(vime_menu_item, "hint", /*hint*/ ctx[6]);
			set_custom_element_data(vime_menu_item, "badge", /*badge*/ ctx[7]);
			set_custom_element_data(vime_menu_item, "checked-icon", /*checkedIcon*/ ctx[8]);
			set_custom_element_data(vime_menu_item, "is-touch", /*isTouch*/ ctx[9]);
		},
		m(target, anchor) {
			insert(target, vime_menu_item, anchor);

			if (default_slot) {
				default_slot.m(vime_menu_item, null);
			}

			/*vime_menu_item_binding*/ ctx[14](vime_menu_item);
			current = true;
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 4096) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[12], dirty, null, null);
				}
			}

			if (!current || dirty & /*identifier*/ 1) {
				set_custom_element_data(vime_menu_item, "identifier", /*identifier*/ ctx[0]);
			}

			if (!current || dirty & /*hidden*/ 2) {
				vime_menu_item.hidden = /*hidden*/ ctx[1];
			}

			if (!current || dirty & /*label*/ 4) {
				set_custom_element_data(vime_menu_item, "label", /*label*/ ctx[2]);
			}

			if (!current || dirty & /*menu*/ 8) {
				set_custom_element_data(vime_menu_item, "menu", /*menu*/ ctx[3]);
			}

			if (!current || dirty & /*expanded*/ 16) {
				set_custom_element_data(vime_menu_item, "expanded", /*expanded*/ ctx[4]);
			}

			if (!current || dirty & /*checked*/ 32) {
				set_custom_element_data(vime_menu_item, "checked", /*checked*/ ctx[5]);
			}

			if (!current || dirty & /*hint*/ 64) {
				set_custom_element_data(vime_menu_item, "hint", /*hint*/ ctx[6]);
			}

			if (!current || dirty & /*badge*/ 128) {
				set_custom_element_data(vime_menu_item, "badge", /*badge*/ ctx[7]);
			}

			if (!current || dirty & /*checkedIcon*/ 256) {
				set_custom_element_data(vime_menu_item, "checked-icon", /*checkedIcon*/ ctx[8]);
			}

			if (!current || dirty & /*isTouch*/ 512) {
				set_custom_element_data(vime_menu_item, "is-touch", /*isTouch*/ ctx[9]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(vime_menu_item);
			if (default_slot) default_slot.d(detaching);
			/*vime_menu_item_binding*/ ctx[14](null);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let __ref;
	let __mounted = false;
	const dispatch = createEventDispatcher();
	let { identifier = undefined } = $$props;
	let { hidden = undefined } = $$props;
	let { label } = $$props;
	let { menu = undefined } = $$props;
	let { expanded = undefined } = $$props;
	let { checked = undefined } = $$props;
	let { hint = undefined } = $$props;
	let { badge = undefined } = $$props;
	let { checkedIcon = undefined } = $$props;
	let { isTouch = undefined } = $$props;
	const getWebComponent = () => __ref;

	onMount(() => {
		__mounted = true;
	});

	const setProp = (prop, value) => {
		if (__ref) $$invalidate(10, __ref[prop] = value, __ref);
	};

	const onEvent = e => {
		e.stopPropagation();
		dispatch(e.type, e.detail);
	};

	let { $$slots = {}, $$scope } = $$props;

	function vime_menu_item_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			__ref = $$value;
			$$invalidate(10, __ref);
		});
	}

	$$self.$$set = $$props => {
		if ("identifier" in $$props) $$invalidate(0, identifier = $$props.identifier);
		if ("hidden" in $$props) $$invalidate(1, hidden = $$props.hidden);
		if ("label" in $$props) $$invalidate(2, label = $$props.label);
		if ("menu" in $$props) $$invalidate(3, menu = $$props.menu);
		if ("expanded" in $$props) $$invalidate(4, expanded = $$props.expanded);
		if ("checked" in $$props) $$invalidate(5, checked = $$props.checked);
		if ("hint" in $$props) $$invalidate(6, hint = $$props.hint);
		if ("badge" in $$props) $$invalidate(7, badge = $$props.badge);
		if ("checkedIcon" in $$props) $$invalidate(8, checkedIcon = $$props.checkedIcon);
		if ("isTouch" in $$props) $$invalidate(9, isTouch = $$props.isTouch);
		if ("$$scope" in $$props) $$invalidate(12, $$scope = $$props.$$scope);
	};

	return [
		identifier,
		hidden,
		label,
		menu,
		expanded,
		checked,
		hint,
		badge,
		checkedIcon,
		isTouch,
		__ref,
		getWebComponent,
		$$scope,
		$$slots,
		vime_menu_item_binding
	];
}

class VimeMenuItem extends SvelteComponent {
  $$prop_def: VimeMenuItemProps;
  $$events_def: VimeMenuItemEvents;
  $$slot_def: VimeMenuItemSlots;

  $on<K extends keyof VimeMenuItemEvents>(type: K, callback: (e: VimeMenuItemEvents[K]) => any): () => void {
	  return super.$on(type, callback);
	}

  $set($$props: Partial<VimeMenuItemProps>): void {
	  super.$set($$props);
	}

	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			identifier: 0,
			hidden: 1,
			label: 2,
			menu: 3,
			expanded: 4,
			checked: 5,
			hint: 6,
			badge: 7,
			checkedIcon: 8,
			isTouch: 9,
			getWebComponent: 11
		});
	}

	get getWebComponent(): HTMLVimeMenuItemElement | undefined {
		return this.$$.ctx[11];
	}
}

export default VimeMenuItem;