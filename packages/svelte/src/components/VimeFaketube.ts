/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import { Components, JSX } from '@vime/core';


interface VimeFaketubeProps {
  
  /**  */
  language?: Components.VimeFaketube["language"]
  
  /**  */
  autoplay?: Components.VimeFaketube["autoplay"]
  
  /**  */
  controls?: Components.VimeFaketube["controls"]
  
  /**  */
  debug?: Components.VimeFaketube["debug"]
  
  /**  */
  loop?: Components.VimeFaketube["loop"]
  
  /**  */
  muted?: Components.VimeFaketube["muted"]
  
  /**  */
  playsinline?: Components.VimeFaketube["playsinline"]
}

interface VimeFaketubeEvents {
  
  /**  */
  vLoadStart: Parameters<JSX.VimeFaketube["onVLoadStart"]>[0]
}

interface VimeFaketubeSlots {
  default: any
}
  
/* generated by Svelte v3.24.1 */
import {
	SvelteComponent,
	binding_callbacks,
	create_slot,
	detach,
	element,
	init,
	insert,
	listen,
	safe_not_equal,
	set_custom_element_data,
	transition_in,
	transition_out,
	update_slot
} from "svelte/internal";

import { createEventDispatcher, onMount } from "svelte";

function create_fragment(ctx) {
	let vime_faketube;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*$$slots*/ ctx[14].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[13], null);

	return {
		c() {
			vime_faketube = element("vime-faketube");
			if (default_slot) default_slot.c();
			set_custom_element_data(vime_faketube, "language", /*language*/ ctx[0]);
			set_custom_element_data(vime_faketube, "autoplay", /*autoplay*/ ctx[1]);
			set_custom_element_data(vime_faketube, "controls", /*controls*/ ctx[2]);
			set_custom_element_data(vime_faketube, "debug", /*debug*/ ctx[3]);
			set_custom_element_data(vime_faketube, "loop", /*loop*/ ctx[4]);
			set_custom_element_data(vime_faketube, "muted", /*muted*/ ctx[5]);
			set_custom_element_data(vime_faketube, "playsinline", /*playsinline*/ ctx[6]);
		},
		m(target, anchor) {
			insert(target, vime_faketube, anchor);

			if (default_slot) {
				default_slot.m(vime_faketube, null);
			}

			/*vime_faketube_binding*/ ctx[15](vime_faketube);
			current = true;

			if (!mounted) {
				dispose = listen(vime_faketube, "vLoadStart", /*onEvent*/ ctx[8]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 8192) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[13], dirty, null, null);
				}
			}

			if (!current || dirty & /*language*/ 1) {
				set_custom_element_data(vime_faketube, "language", /*language*/ ctx[0]);
			}

			if (!current || dirty & /*autoplay*/ 2) {
				set_custom_element_data(vime_faketube, "autoplay", /*autoplay*/ ctx[1]);
			}

			if (!current || dirty & /*controls*/ 4) {
				set_custom_element_data(vime_faketube, "controls", /*controls*/ ctx[2]);
			}

			if (!current || dirty & /*debug*/ 8) {
				set_custom_element_data(vime_faketube, "debug", /*debug*/ ctx[3]);
			}

			if (!current || dirty & /*loop*/ 16) {
				set_custom_element_data(vime_faketube, "loop", /*loop*/ ctx[4]);
			}

			if (!current || dirty & /*muted*/ 32) {
				set_custom_element_data(vime_faketube, "muted", /*muted*/ ctx[5]);
			}

			if (!current || dirty & /*playsinline*/ 64) {
				set_custom_element_data(vime_faketube, "playsinline", /*playsinline*/ ctx[6]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(vime_faketube);
			if (default_slot) default_slot.d(detaching);
			/*vime_faketube_binding*/ ctx[15](null);
			mounted = false;
			dispose();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let __ref;
	let __mounted = false;
	const dispatch = createEventDispatcher();
	let { language = undefined } = $$props;
	let { autoplay = undefined } = $$props;
	let { controls = undefined } = $$props;
	let { debug = undefined } = $$props;
	let { loop = undefined } = $$props;
	let { muted = undefined } = $$props;
	let { playsinline = undefined } = $$props;
	const getAdapter = (...args) => __ref.getAdapter(...args);
	const dispatchLoadStart = (...args) => __ref.dispatchLoadStart(...args);
	const dispatchStateChange = (...args) => __ref.dispatchStateChange(...args);
	const getWebComponent = () => __ref;

	onMount(() => {
		__mounted = true;
	});

	const setProp = (prop, value) => {
		if (__ref) $$invalidate(7, __ref[prop] = value, __ref);
	};

	const onEvent = e => {
		e.stopPropagation();
		dispatch(e.type, e.detail);
	};

	let { $$slots = {}, $$scope } = $$props;

	function vime_faketube_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			__ref = $$value;
			$$invalidate(7, __ref);
		});
	}

	$$self.$$set = $$props => {
		if ("language" in $$props) $$invalidate(0, language = $$props.language);
		if ("autoplay" in $$props) $$invalidate(1, autoplay = $$props.autoplay);
		if ("controls" in $$props) $$invalidate(2, controls = $$props.controls);
		if ("debug" in $$props) $$invalidate(3, debug = $$props.debug);
		if ("loop" in $$props) $$invalidate(4, loop = $$props.loop);
		if ("muted" in $$props) $$invalidate(5, muted = $$props.muted);
		if ("playsinline" in $$props) $$invalidate(6, playsinline = $$props.playsinline);
		if ("$$scope" in $$props) $$invalidate(13, $$scope = $$props.$$scope);
	};

	return [
		language,
		autoplay,
		controls,
		debug,
		loop,
		muted,
		playsinline,
		__ref,
		onEvent,
		getAdapter,
		dispatchLoadStart,
		dispatchStateChange,
		getWebComponent,
		$$scope,
		$$slots,
		vime_faketube_binding
	];
}

class VimeFaketube extends SvelteComponent {
  $$prop_def: VimeFaketubeProps;
  $$events_def: VimeFaketubeEvents;
  $$slot_def: VimeFaketubeSlots;

  $on<K extends keyof VimeFaketubeEvents>(type: K, callback: (e: VimeFaketubeEvents[K]) => any): () => void {
	  return super.$on(type, callback);
	}

  $set($$props: Partial<VimeFaketubeProps>): void {
	  super.$set($$props);
	}

	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			language: 0,
			autoplay: 1,
			controls: 2,
			debug: 3,
			loop: 4,
			muted: 5,
			playsinline: 6,
			getAdapter: 9,
			dispatchLoadStart: 10,
			dispatchStateChange: 11,
			getWebComponent: 12
		});
	}

	
  /** Returns a mock adapter. */
 get getAdapter(): Components.VimeFaketube["getAdapter"] {
		return this.$$.ctx[9];
	}

	
  /** Dispatches the `vLoadStart` event. */
 get dispatchLoadStart(): Components.VimeFaketube["dispatchLoadStart"] {
		return this.$$.ctx[10];
	}

	
  /** Dispatches a state change event. */
 get dispatchStateChange(): Components.VimeFaketube["dispatchStateChange"] {
		return this.$$.ctx[11];
	}

	get getWebComponent(): HTMLVimeFaketubeElement | undefined {
		return this.$$.ctx[12];
	}
}

export default VimeFaketube;