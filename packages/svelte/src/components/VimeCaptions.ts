/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import { Components, JSX } from '@vime/core';


interface VimeCaptionsProps {
  
  /** Whether the captions should be visible or not. */
  hidden?: Components.VimeCaptions["hidden"]
  
  /** The height of any lower control bar in pixels so that the captions can reposition when it's
active. */
  controlsHeight?: Components.VimeCaptions["controlsHeight"]
  
  /**  */
  isControlsActive?: Components.VimeCaptions["isControlsActive"]
  
  /**  */
  isVideoView?: Components.VimeCaptions["isVideoView"]
  
  /**  */
  playbackStarted?: Components.VimeCaptions["playbackStarted"]
  
  /**  */
  textTracks?: Components.VimeCaptions["textTracks"]
}

interface VimeCaptionsEvents {
  
  /** Emitted when the current track changes. */
  vTrackChange: Parameters<JSX.VimeCaptions["onVTrackChange"]>[0]
  
  /** Emitted when the active cues change. A cue is active when
`currentTime >= cue.startTime && currentTime <= cue.endTime`. */
  vCuesChange: Parameters<JSX.VimeCaptions["onVCuesChange"]>[0]
}

interface VimeCaptionsSlots {
  default: any
}
  
/* generated by Svelte v3.24.1 */
import {
	SvelteComponent,
	binding_callbacks,
	create_slot,
	detach,
	element,
	init,
	insert,
	listen,
	run_all,
	safe_not_equal,
	set_custom_element_data,
	transition_in,
	transition_out,
	update_slot
} from "svelte/internal";

import { createEventDispatcher, onMount } from "svelte";

function create_fragment(ctx) {
	let vime_captions;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*$$slots*/ ctx[10].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[9], null);

	return {
		c() {
			vime_captions = element("vime-captions");
			if (default_slot) default_slot.c();
			vime_captions.hidden = /*hidden*/ ctx[0];
			set_custom_element_data(vime_captions, "controls-height", /*controlsHeight*/ ctx[1]);
			set_custom_element_data(vime_captions, "is-controls-active", /*isControlsActive*/ ctx[2]);
			set_custom_element_data(vime_captions, "is-video-view", /*isVideoView*/ ctx[3]);
			set_custom_element_data(vime_captions, "playback-started", /*playbackStarted*/ ctx[4]);
		},
		m(target, anchor) {
			insert(target, vime_captions, anchor);

			if (default_slot) {
				default_slot.m(vime_captions, null);
			}

			/*vime_captions_binding*/ ctx[11](vime_captions);
			current = true;

			if (!mounted) {
				dispose = [
					listen(vime_captions, "vTrackChange", /*onEvent*/ ctx[6]),
					listen(vime_captions, "vCuesChange", /*onEvent*/ ctx[6])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 512) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[9], dirty, null, null);
				}
			}

			if (!current || dirty & /*hidden*/ 1) {
				vime_captions.hidden = /*hidden*/ ctx[0];
			}

			if (!current || dirty & /*controlsHeight*/ 2) {
				set_custom_element_data(vime_captions, "controls-height", /*controlsHeight*/ ctx[1]);
			}

			if (!current || dirty & /*isControlsActive*/ 4) {
				set_custom_element_data(vime_captions, "is-controls-active", /*isControlsActive*/ ctx[2]);
			}

			if (!current || dirty & /*isVideoView*/ 8) {
				set_custom_element_data(vime_captions, "is-video-view", /*isVideoView*/ ctx[3]);
			}

			if (!current || dirty & /*playbackStarted*/ 16) {
				set_custom_element_data(vime_captions, "playback-started", /*playbackStarted*/ ctx[4]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(vime_captions);
			if (default_slot) default_slot.d(detaching);
			/*vime_captions_binding*/ ctx[11](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let __ref;
	let __mounted = false;
	const dispatch = createEventDispatcher();
	let { hidden = undefined } = $$props;
	let { controlsHeight = undefined } = $$props;
	let { isControlsActive = undefined } = $$props;
	let { isVideoView = undefined } = $$props;
	let { playbackStarted = undefined } = $$props;
	let { textTracks = undefined } = $$props;
	const getWebComponent = () => __ref;

	onMount(() => {
		$$invalidate(12, __mounted = true);
	});

	const setProp = (prop, value) => {
		if (__ref) $$invalidate(5, __ref[prop] = value, __ref);
	};

	const onEvent = e => {
		e.stopPropagation();
		dispatch(e.type, e.detail);
	};

	let { $$slots = {}, $$scope } = $$props;

	function vime_captions_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			__ref = $$value;
			$$invalidate(5, __ref);
		});
	}

	$$self.$$set = $$props => {
		if ("hidden" in $$props) $$invalidate(0, hidden = $$props.hidden);
		if ("controlsHeight" in $$props) $$invalidate(1, controlsHeight = $$props.controlsHeight);
		if ("isControlsActive" in $$props) $$invalidate(2, isControlsActive = $$props.isControlsActive);
		if ("isVideoView" in $$props) $$invalidate(3, isVideoView = $$props.isVideoView);
		if ("playbackStarted" in $$props) $$invalidate(4, playbackStarted = $$props.playbackStarted);
		if ("textTracks" in $$props) $$invalidate(7, textTracks = $$props.textTracks);
		if ("$$scope" in $$props) $$invalidate(9, $$scope = $$props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*__mounted, textTracks*/ 4224) {
			$: if (__mounted) setProp("textTracks", textTracks);
		}
	};

	return [
		hidden,
		controlsHeight,
		isControlsActive,
		isVideoView,
		playbackStarted,
		__ref,
		onEvent,
		textTracks,
		getWebComponent,
		$$scope,
		$$slots,
		vime_captions_binding
	];
}

class VimeCaptions extends SvelteComponent {
  $$prop_def: VimeCaptionsProps;
  $$events_def: VimeCaptionsEvents;
  $$slot_def: VimeCaptionsSlots;

  $on<K extends keyof VimeCaptionsEvents>(type: K, callback: (e: VimeCaptionsEvents[K]) => any): () => void {
	  return super.$on(type, callback);
	}

  $set($$props: Partial<VimeCaptionsProps>): void {
	  super.$set($$props);
	}

	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			hidden: 0,
			controlsHeight: 1,
			isControlsActive: 2,
			isVideoView: 3,
			playbackStarted: 4,
			textTracks: 7,
			getWebComponent: 8
		});
	}

	get getWebComponent(): HTMLVimeCaptionsElement | undefined {
		return this.$$.ctx[8];
	}
}

export default VimeCaptions;