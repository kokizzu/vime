/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import { Components, JSX } from '@vime/core';


interface VimeDailymotionProps {
  
  /** The Dailymotion resource ID of the video to load. */
  videoId?: Components.VimeDailymotion["videoId"]
  
  /** Whether to automatically play the next video in the queue. */
  shouldAutoplayQueue?: Components.VimeDailymotion["shouldAutoplayQueue"]
  
  /** Whether to show the 'Up Next' queue. */
  showUpNextQueue?: Components.VimeDailymotion["showUpNextQueue"]
  
  /** Whether to show buttons for sharing the video. */
  showShareButtons?: Components.VimeDailymotion["showShareButtons"]
  
  /** Change the default highlight color used in the controls (hex value without the leading #).
Color set in the Partner HQ will override this prop. */
  color?: Components.VimeDailymotion["color"]
  
  /** Forwards your syndication key to the player. */
  syndication?: Components.VimeDailymotion["syndication"]
  
  /** Whether to display the Dailymotion logo. */
  showDailymotionLogo?: Components.VimeDailymotion["showDailymotionLogo"]
  
  /** Whether to show video information (title and owner) on the start screen. */
  showVideoInfo?: Components.VimeDailymotion["showVideoInfo"]
  
  /**  */
  language?: Components.VimeDailymotion["language"]
  
  /**  */
  autoplay?: Components.VimeDailymotion["autoplay"]
  
  /**  */
  controls?: Components.VimeDailymotion["controls"]
  
  /**  */
  logger?: Components.VimeDailymotion["logger"]
  
  /**  */
  loop?: Components.VimeDailymotion["loop"]
  
  /**  */
  muted?: Components.VimeDailymotion["muted"]
  
  /**  */
  playsinline?: Components.VimeDailymotion["playsinline"]
}

interface VimeDailymotionEvents {
  
  /**  */
  vLoadStart: Parameters<JSX.VimeDailymotion["onVLoadStart"]>[0]
}

interface VimeDailymotionSlots {
  default: any
}
  
/* generated by Svelte v3.24.1 */
import {
	SvelteComponent,
	binding_callbacks,
	create_slot,
	detach,
	element,
	init,
	insert,
	listen,
	safe_not_equal,
	set_custom_element_data,
	transition_in,
	transition_out,
	update_slot
} from "svelte/internal";

import { createEventDispatcher, onMount } from "svelte";

function create_fragment(ctx) {
	let vime_dailymotion;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*$$slots*/ ctx[20].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[19], null);

	return {
		c() {
			vime_dailymotion = element("vime-dailymotion");
			if (default_slot) default_slot.c();
			set_custom_element_data(vime_dailymotion, "video-id", /*videoId*/ ctx[0]);
			set_custom_element_data(vime_dailymotion, "should-autoplay-queue", /*shouldAutoplayQueue*/ ctx[1]);
			set_custom_element_data(vime_dailymotion, "show-up-next-queue", /*showUpNextQueue*/ ctx[2]);
			set_custom_element_data(vime_dailymotion, "show-share-buttons", /*showShareButtons*/ ctx[3]);
			set_custom_element_data(vime_dailymotion, "color", /*color*/ ctx[4]);
			set_custom_element_data(vime_dailymotion, "syndication", /*syndication*/ ctx[5]);
			set_custom_element_data(vime_dailymotion, "show-dailymotion-logo", /*showDailymotionLogo*/ ctx[6]);
			set_custom_element_data(vime_dailymotion, "show-video-info", /*showVideoInfo*/ ctx[7]);
			set_custom_element_data(vime_dailymotion, "language", /*language*/ ctx[8]);
			set_custom_element_data(vime_dailymotion, "autoplay", /*autoplay*/ ctx[9]);
			set_custom_element_data(vime_dailymotion, "controls", /*controls*/ ctx[10]);
			set_custom_element_data(vime_dailymotion, "loop", /*loop*/ ctx[11]);
			set_custom_element_data(vime_dailymotion, "muted", /*muted*/ ctx[12]);
			set_custom_element_data(vime_dailymotion, "playsinline", /*playsinline*/ ctx[13]);
		},
		m(target, anchor) {
			insert(target, vime_dailymotion, anchor);

			if (default_slot) {
				default_slot.m(vime_dailymotion, null);
			}

			/*vime_dailymotion_binding*/ ctx[21](vime_dailymotion);
			current = true;

			if (!mounted) {
				dispose = listen(vime_dailymotion, "vLoadStart", /*onEvent*/ ctx[15]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 524288) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[19], dirty, null, null);
				}
			}

			if (!current || dirty & /*videoId*/ 1) {
				set_custom_element_data(vime_dailymotion, "video-id", /*videoId*/ ctx[0]);
			}

			if (!current || dirty & /*shouldAutoplayQueue*/ 2) {
				set_custom_element_data(vime_dailymotion, "should-autoplay-queue", /*shouldAutoplayQueue*/ ctx[1]);
			}

			if (!current || dirty & /*showUpNextQueue*/ 4) {
				set_custom_element_data(vime_dailymotion, "show-up-next-queue", /*showUpNextQueue*/ ctx[2]);
			}

			if (!current || dirty & /*showShareButtons*/ 8) {
				set_custom_element_data(vime_dailymotion, "show-share-buttons", /*showShareButtons*/ ctx[3]);
			}

			if (!current || dirty & /*color*/ 16) {
				set_custom_element_data(vime_dailymotion, "color", /*color*/ ctx[4]);
			}

			if (!current || dirty & /*syndication*/ 32) {
				set_custom_element_data(vime_dailymotion, "syndication", /*syndication*/ ctx[5]);
			}

			if (!current || dirty & /*showDailymotionLogo*/ 64) {
				set_custom_element_data(vime_dailymotion, "show-dailymotion-logo", /*showDailymotionLogo*/ ctx[6]);
			}

			if (!current || dirty & /*showVideoInfo*/ 128) {
				set_custom_element_data(vime_dailymotion, "show-video-info", /*showVideoInfo*/ ctx[7]);
			}

			if (!current || dirty & /*language*/ 256) {
				set_custom_element_data(vime_dailymotion, "language", /*language*/ ctx[8]);
			}

			if (!current || dirty & /*autoplay*/ 512) {
				set_custom_element_data(vime_dailymotion, "autoplay", /*autoplay*/ ctx[9]);
			}

			if (!current || dirty & /*controls*/ 1024) {
				set_custom_element_data(vime_dailymotion, "controls", /*controls*/ ctx[10]);
			}

			if (!current || dirty & /*loop*/ 2048) {
				set_custom_element_data(vime_dailymotion, "loop", /*loop*/ ctx[11]);
			}

			if (!current || dirty & /*muted*/ 4096) {
				set_custom_element_data(vime_dailymotion, "muted", /*muted*/ ctx[12]);
			}

			if (!current || dirty & /*playsinline*/ 8192) {
				set_custom_element_data(vime_dailymotion, "playsinline", /*playsinline*/ ctx[13]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(vime_dailymotion);
			if (default_slot) default_slot.d(detaching);
			/*vime_dailymotion_binding*/ ctx[21](null);
			mounted = false;
			dispose();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let __ref;
	let __mounted = false;
	const dispatch = createEventDispatcher();
	let { videoId } = $$props;
	let { shouldAutoplayQueue = undefined } = $$props;
	let { showUpNextQueue = undefined } = $$props;
	let { showShareButtons = undefined } = $$props;
	let { color = undefined } = $$props;
	let { syndication = undefined } = $$props;
	let { showDailymotionLogo = undefined } = $$props;
	let { showVideoInfo = undefined } = $$props;
	let { language = undefined } = $$props;
	let { autoplay = undefined } = $$props;
	let { controls = undefined } = $$props;
	let { logger = undefined } = $$props;
	let { loop = undefined } = $$props;
	let { muted = undefined } = $$props;
	let { playsinline = undefined } = $$props;
	const getAdapter = (...args) => __ref.getAdapter(...args);
	const getWebComponent = () => __ref;

	onMount(() => {
		$$invalidate(22, __mounted = true);
	});

	const setProp = (prop, value) => {
		if (__ref) $$invalidate(14, __ref[prop] = value, __ref);
	};

	const onEvent = e => {
		e.stopPropagation();
		dispatch(e.type, e.detail);
	};

	let { $$slots = {}, $$scope } = $$props;

	function vime_dailymotion_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			__ref = $$value;
			$$invalidate(14, __ref);
		});
	}

	$$self.$$set = $$props => {
		if ("videoId" in $$props) $$invalidate(0, videoId = $$props.videoId);
		if ("shouldAutoplayQueue" in $$props) $$invalidate(1, shouldAutoplayQueue = $$props.shouldAutoplayQueue);
		if ("showUpNextQueue" in $$props) $$invalidate(2, showUpNextQueue = $$props.showUpNextQueue);
		if ("showShareButtons" in $$props) $$invalidate(3, showShareButtons = $$props.showShareButtons);
		if ("color" in $$props) $$invalidate(4, color = $$props.color);
		if ("syndication" in $$props) $$invalidate(5, syndication = $$props.syndication);
		if ("showDailymotionLogo" in $$props) $$invalidate(6, showDailymotionLogo = $$props.showDailymotionLogo);
		if ("showVideoInfo" in $$props) $$invalidate(7, showVideoInfo = $$props.showVideoInfo);
		if ("language" in $$props) $$invalidate(8, language = $$props.language);
		if ("autoplay" in $$props) $$invalidate(9, autoplay = $$props.autoplay);
		if ("controls" in $$props) $$invalidate(10, controls = $$props.controls);
		if ("logger" in $$props) $$invalidate(16, logger = $$props.logger);
		if ("loop" in $$props) $$invalidate(11, loop = $$props.loop);
		if ("muted" in $$props) $$invalidate(12, muted = $$props.muted);
		if ("playsinline" in $$props) $$invalidate(13, playsinline = $$props.playsinline);
		if ("$$scope" in $$props) $$invalidate(19, $$scope = $$props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*__mounted, logger*/ 4259840) {
			$: if (__mounted) setProp("logger", logger);
		}
	};

	return [
		videoId,
		shouldAutoplayQueue,
		showUpNextQueue,
		showShareButtons,
		color,
		syndication,
		showDailymotionLogo,
		showVideoInfo,
		language,
		autoplay,
		controls,
		loop,
		muted,
		playsinline,
		__ref,
		onEvent,
		logger,
		getAdapter,
		getWebComponent,
		$$scope,
		$$slots,
		vime_dailymotion_binding
	];
}

class VimeDailymotion extends SvelteComponent {
  $$prop_def: VimeDailymotionProps;
  $$events_def: VimeDailymotionEvents;
  $$slot_def: VimeDailymotionSlots;

  $on<K extends keyof VimeDailymotionEvents>(type: K, callback: (e: VimeDailymotionEvents[K]) => any): () => void {
	  return super.$on(type, callback);
	}

  $set($$props: Partial<VimeDailymotionProps>): void {
	  super.$set($$props);
	}

	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			videoId: 0,
			shouldAutoplayQueue: 1,
			showUpNextQueue: 2,
			showShareButtons: 3,
			color: 4,
			syndication: 5,
			showDailymotionLogo: 6,
			showVideoInfo: 7,
			language: 8,
			autoplay: 9,
			controls: 10,
			logger: 16,
			loop: 11,
			muted: 12,
			playsinline: 13,
			getAdapter: 17,
			getWebComponent: 18
		});
	}

	
  /**  */
 get getAdapter(): Components.VimeDailymotion["getAdapter"] {
		return this.$$.ctx[17];
	}

	get getWebComponent(): HTMLVimeDailymotionElement | undefined {
		return this.$$.ctx[18];
	}
}

export default VimeDailymotion;