/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import { Components, JSX } from '@vime/core';


interface VimeLiveIndicatorProps {
  
  /**  */
  isLive?: Components.VimeLiveIndicator["isLive"]
  
  /**  */
  i18n?: Components.VimeLiveIndicator["i18n"]
}

interface VimeLiveIndicatorEvents {
  
}

interface VimeLiveIndicatorSlots {
  default: any
}
  
/* generated by Svelte v3.24.1 */
import {
	SvelteComponent,
	binding_callbacks,
	create_slot,
	detach,
	element,
	init,
	insert,
	safe_not_equal,
	set_custom_element_data,
	transition_in,
	transition_out,
	update_slot
} from "svelte/internal";

import { createEventDispatcher, onMount } from "svelte";

function create_fragment(ctx) {
	let vime_live_indicator;
	let current;
	const default_slot_template = /*$$slots*/ ctx[5].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[4], null);

	return {
		c() {
			vime_live_indicator = element("vime-live-indicator");
			if (default_slot) default_slot.c();
			set_custom_element_data(vime_live_indicator, "is-live", /*isLive*/ ctx[0]);
		},
		m(target, anchor) {
			insert(target, vime_live_indicator, anchor);

			if (default_slot) {
				default_slot.m(vime_live_indicator, null);
			}

			/*vime_live_indicator_binding*/ ctx[6](vime_live_indicator);
			current = true;
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 16) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[4], dirty, null, null);
				}
			}

			if (!current || dirty & /*isLive*/ 1) {
				set_custom_element_data(vime_live_indicator, "is-live", /*isLive*/ ctx[0]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(vime_live_indicator);
			if (default_slot) default_slot.d(detaching);
			/*vime_live_indicator_binding*/ ctx[6](null);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let __ref;
	let __mounted = false;
	const dispatch = createEventDispatcher();
	let { isLive = undefined } = $$props;
	let { i18n = undefined } = $$props;
	const getWebComponent = () => __ref;

	onMount(() => {
		$$invalidate(7, __mounted = true);
	});

	const setProp = (prop, value) => {
		if (__ref) $$invalidate(1, __ref[prop] = value, __ref);
	};

	const onEvent = e => {
		e.stopPropagation();
		dispatch(e.type, e.detail);
	};

	let { $$slots = {}, $$scope } = $$props;

	function vime_live_indicator_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			__ref = $$value;
			$$invalidate(1, __ref);
		});
	}

	$$self.$$set = $$props => {
		if ("isLive" in $$props) $$invalidate(0, isLive = $$props.isLive);
		if ("i18n" in $$props) $$invalidate(2, i18n = $$props.i18n);
		if ("$$scope" in $$props) $$invalidate(4, $$scope = $$props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*__mounted, i18n*/ 132) {
			$: if (__mounted) setProp("i18n", i18n);
		}
	};

	return [
		isLive,
		__ref,
		i18n,
		getWebComponent,
		$$scope,
		$$slots,
		vime_live_indicator_binding
	];
}

class VimeLiveIndicator extends SvelteComponent {
  $$prop_def: VimeLiveIndicatorProps;
  $$events_def: VimeLiveIndicatorEvents;
  $$slot_def: VimeLiveIndicatorSlots;

  $on<K extends keyof VimeLiveIndicatorEvents>(type: K, callback: (e: VimeLiveIndicatorEvents[K]) => any): () => void {
	  return super.$on(type, callback);
	}

  $set($$props: Partial<VimeLiveIndicatorProps>): void {
	  super.$set($$props);
	}

	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { isLive: 0, i18n: 2, getWebComponent: 3 });
	}

	get getWebComponent(): HTMLVimeLiveIndicatorElement | undefined {
		return this.$$.ctx[3];
	}
}

export default VimeLiveIndicator;