/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import { Components, JSX } from '@vime/core';


interface VimeSpinnerProps {
  
  /**  */
  isVideoView?: Components.VimeSpinner["isVideoView"]
  
  /**  */
  buffering?: Components.VimeSpinner["buffering"]
}

interface VimeSpinnerEvents {
  
  /** Emitted when the spinner will be shown. */
  vWillShow: Parameters<JSX.VimeSpinner["onVWillShow"]>[0]
  
  /** Emitted when the spinner will be hidden. */
  vWillHide: Parameters<JSX.VimeSpinner["onVWillHide"]>[0]
}

interface VimeSpinnerSlots {
  default: any
}
  
/* generated by Svelte v3.24.1 */
import {
	SvelteComponent,
	binding_callbacks,
	create_slot,
	detach,
	element,
	init,
	insert,
	listen,
	run_all,
	safe_not_equal,
	set_custom_element_data,
	transition_in,
	transition_out,
	update_slot
} from "svelte/internal";

import { createEventDispatcher, onMount } from "svelte";

function create_fragment(ctx) {
	let vime_spinner;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*$$slots*/ ctx[6].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[5], null);

	return {
		c() {
			vime_spinner = element("vime-spinner");
			if (default_slot) default_slot.c();
			set_custom_element_data(vime_spinner, "is-video-view", /*isVideoView*/ ctx[0]);
			set_custom_element_data(vime_spinner, "buffering", /*buffering*/ ctx[1]);
		},
		m(target, anchor) {
			insert(target, vime_spinner, anchor);

			if (default_slot) {
				default_slot.m(vime_spinner, null);
			}

			/*vime_spinner_binding*/ ctx[7](vime_spinner);
			current = true;

			if (!mounted) {
				dispose = [
					listen(vime_spinner, "vWillShow", /*onEvent*/ ctx[3]),
					listen(vime_spinner, "vWillHide", /*onEvent*/ ctx[3])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 32) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[5], dirty, null, null);
				}
			}

			if (!current || dirty & /*isVideoView*/ 1) {
				set_custom_element_data(vime_spinner, "is-video-view", /*isVideoView*/ ctx[0]);
			}

			if (!current || dirty & /*buffering*/ 2) {
				set_custom_element_data(vime_spinner, "buffering", /*buffering*/ ctx[1]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(vime_spinner);
			if (default_slot) default_slot.d(detaching);
			/*vime_spinner_binding*/ ctx[7](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let __ref;
	let __mounted = false;
	const dispatch = createEventDispatcher();
	let { isVideoView = undefined } = $$props;
	let { buffering = undefined } = $$props;
	const getWebComponent = () => __ref;

	onMount(() => {
		__mounted = true;
	});

	const setProp = (prop, value) => {
		if (__ref) $$invalidate(2, __ref[prop] = value, __ref);
	};

	const onEvent = e => {
		e.stopPropagation();
		dispatch(e.type, e.detail);
	};

	let { $$slots = {}, $$scope } = $$props;

	function vime_spinner_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			__ref = $$value;
			$$invalidate(2, __ref);
		});
	}

	$$self.$$set = $$props => {
		if ("isVideoView" in $$props) $$invalidate(0, isVideoView = $$props.isVideoView);
		if ("buffering" in $$props) $$invalidate(1, buffering = $$props.buffering);
		if ("$$scope" in $$props) $$invalidate(5, $$scope = $$props.$$scope);
	};

	return [
		isVideoView,
		buffering,
		__ref,
		onEvent,
		getWebComponent,
		$$scope,
		$$slots,
		vime_spinner_binding
	];
}

class VimeSpinner extends SvelteComponent {
  $$prop_def: VimeSpinnerProps;
  $$events_def: VimeSpinnerEvents;
  $$slot_def: VimeSpinnerSlots;

  $on<K extends keyof VimeSpinnerEvents>(type: K, callback: (e: VimeSpinnerEvents[K]) => any): () => void {
	  return super.$on(type, callback);
	}

  $set($$props: Partial<VimeSpinnerProps>): void {
	  super.$set($$props);
	}

	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			isVideoView: 0,
			buffering: 1,
			getWebComponent: 4
		});
	}

	get getWebComponent(): HTMLVimeSpinnerElement | undefined {
		return this.$$.ctx[4];
	}
}

export default VimeSpinner;