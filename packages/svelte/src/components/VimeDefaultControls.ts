/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import { Components, JSX } from '@vime/core';


interface VimeDefaultControlsProps {
  
  /** The length in milliseconds that the controls are active for before fading out. Audio players
are not effected by this prop. */
  activeDuration?: Components.VimeDefaultControls["activeDuration"]
  
  /** Whether the controls should wait for playback to start before being shown. Audio players
are not effected by this prop. */
  waitForPlaybackStart?: Components.VimeDefaultControls["waitForPlaybackStart"]
  
  /** Whether the controls should show/hide when paused. Audio players are not effected by this prop. */
  hideWhenPaused?: Components.VimeDefaultControls["hideWhenPaused"]
  
  /** Whether the controls should hide when the mouse leaves the player. Audio players are not
effected by this prop. */
  hideOnMouseLeave?: Components.VimeDefaultControls["hideOnMouseLeave"]
  
  /**  */
  isMobile?: Components.VimeDefaultControls["isMobile"]
  
  /**  */
  isLive?: Components.VimeDefaultControls["isLive"]
  
  /**  */
  isAudioView?: Components.VimeDefaultControls["isAudioView"]
  
  /**  */
  isVideoView?: Components.VimeDefaultControls["isVideoView"]
}

interface VimeDefaultControlsEvents {
  
}

interface VimeDefaultControlsSlots {
  default: any
}
  
/* generated by Svelte v3.24.1 */
import {
	SvelteComponent,
	binding_callbacks,
	create_slot,
	detach,
	element,
	init,
	insert,
	safe_not_equal,
	set_custom_element_data,
	transition_in,
	transition_out,
	update_slot
} from "svelte/internal";

import { createEventDispatcher, onMount } from "svelte";

function create_fragment(ctx) {
	let vime_default_controls;
	let current;
	const default_slot_template = /*$$slots*/ ctx[11].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[10], null);

	return {
		c() {
			vime_default_controls = element("vime-default-controls");
			if (default_slot) default_slot.c();
			set_custom_element_data(vime_default_controls, "active-duration", /*activeDuration*/ ctx[0]);
			set_custom_element_data(vime_default_controls, "wait-for-playback-start", /*waitForPlaybackStart*/ ctx[1]);
			set_custom_element_data(vime_default_controls, "hide-when-paused", /*hideWhenPaused*/ ctx[2]);
			set_custom_element_data(vime_default_controls, "hide-on-mouse-leave", /*hideOnMouseLeave*/ ctx[3]);
			set_custom_element_data(vime_default_controls, "is-mobile", /*isMobile*/ ctx[4]);
			set_custom_element_data(vime_default_controls, "is-live", /*isLive*/ ctx[5]);
			set_custom_element_data(vime_default_controls, "is-audio-view", /*isAudioView*/ ctx[6]);
			set_custom_element_data(vime_default_controls, "is-video-view", /*isVideoView*/ ctx[7]);
		},
		m(target, anchor) {
			insert(target, vime_default_controls, anchor);

			if (default_slot) {
				default_slot.m(vime_default_controls, null);
			}

			/*vime_default_controls_binding*/ ctx[12](vime_default_controls);
			current = true;
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 1024) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[10], dirty, null, null);
				}
			}

			if (!current || dirty & /*activeDuration*/ 1) {
				set_custom_element_data(vime_default_controls, "active-duration", /*activeDuration*/ ctx[0]);
			}

			if (!current || dirty & /*waitForPlaybackStart*/ 2) {
				set_custom_element_data(vime_default_controls, "wait-for-playback-start", /*waitForPlaybackStart*/ ctx[1]);
			}

			if (!current || dirty & /*hideWhenPaused*/ 4) {
				set_custom_element_data(vime_default_controls, "hide-when-paused", /*hideWhenPaused*/ ctx[2]);
			}

			if (!current || dirty & /*hideOnMouseLeave*/ 8) {
				set_custom_element_data(vime_default_controls, "hide-on-mouse-leave", /*hideOnMouseLeave*/ ctx[3]);
			}

			if (!current || dirty & /*isMobile*/ 16) {
				set_custom_element_data(vime_default_controls, "is-mobile", /*isMobile*/ ctx[4]);
			}

			if (!current || dirty & /*isLive*/ 32) {
				set_custom_element_data(vime_default_controls, "is-live", /*isLive*/ ctx[5]);
			}

			if (!current || dirty & /*isAudioView*/ 64) {
				set_custom_element_data(vime_default_controls, "is-audio-view", /*isAudioView*/ ctx[6]);
			}

			if (!current || dirty & /*isVideoView*/ 128) {
				set_custom_element_data(vime_default_controls, "is-video-view", /*isVideoView*/ ctx[7]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(vime_default_controls);
			if (default_slot) default_slot.d(detaching);
			/*vime_default_controls_binding*/ ctx[12](null);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let __ref;
	let __mounted = false;
	const dispatch = createEventDispatcher();
	let { activeDuration = undefined } = $$props;
	let { waitForPlaybackStart = undefined } = $$props;
	let { hideWhenPaused = undefined } = $$props;
	let { hideOnMouseLeave = undefined } = $$props;
	let { isMobile = undefined } = $$props;
	let { isLive = undefined } = $$props;
	let { isAudioView = undefined } = $$props;
	let { isVideoView = undefined } = $$props;
	const getWebComponent = () => __ref;

	onMount(() => {
		__mounted = true;
	});

	const setProp = (prop, value) => {
		if (__ref) $$invalidate(8, __ref[prop] = value, __ref);
	};

	const onEvent = e => {
		e.stopPropagation();
		dispatch(e.type, e.detail);
	};

	let { $$slots = {}, $$scope } = $$props;

	function vime_default_controls_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			__ref = $$value;
			$$invalidate(8, __ref);
		});
	}

	$$self.$$set = $$props => {
		if ("activeDuration" in $$props) $$invalidate(0, activeDuration = $$props.activeDuration);
		if ("waitForPlaybackStart" in $$props) $$invalidate(1, waitForPlaybackStart = $$props.waitForPlaybackStart);
		if ("hideWhenPaused" in $$props) $$invalidate(2, hideWhenPaused = $$props.hideWhenPaused);
		if ("hideOnMouseLeave" in $$props) $$invalidate(3, hideOnMouseLeave = $$props.hideOnMouseLeave);
		if ("isMobile" in $$props) $$invalidate(4, isMobile = $$props.isMobile);
		if ("isLive" in $$props) $$invalidate(5, isLive = $$props.isLive);
		if ("isAudioView" in $$props) $$invalidate(6, isAudioView = $$props.isAudioView);
		if ("isVideoView" in $$props) $$invalidate(7, isVideoView = $$props.isVideoView);
		if ("$$scope" in $$props) $$invalidate(10, $$scope = $$props.$$scope);
	};

	return [
		activeDuration,
		waitForPlaybackStart,
		hideWhenPaused,
		hideOnMouseLeave,
		isMobile,
		isLive,
		isAudioView,
		isVideoView,
		__ref,
		getWebComponent,
		$$scope,
		$$slots,
		vime_default_controls_binding
	];
}

class VimeDefaultControls extends SvelteComponent {
  $$prop_def: VimeDefaultControlsProps;
  $$events_def: VimeDefaultControlsEvents;
  $$slot_def: VimeDefaultControlsSlots;

  $on<K extends keyof VimeDefaultControlsEvents>(type: K, callback: (e: VimeDefaultControlsEvents[K]) => any): () => void {
	  return super.$on(type, callback);
	}

  $set($$props: Partial<VimeDefaultControlsProps>): void {
	  super.$set($$props);
	}

	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			activeDuration: 0,
			waitForPlaybackStart: 1,
			hideWhenPaused: 2,
			hideOnMouseLeave: 3,
			isMobile: 4,
			isLive: 5,
			isAudioView: 6,
			isVideoView: 7,
			getWebComponent: 9
		});
	}

	get getWebComponent(): HTMLVimeDefaultControlsElement | undefined {
		return this.$$.ctx[9];
	}
}

export default VimeDefaultControls;