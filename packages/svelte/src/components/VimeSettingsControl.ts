/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import { Components, JSX } from '@vime/core';


interface VimeSettingsControlProps {
  
  /** The URL to an SVG element or fragment to load. */
  icon?: Components.VimeSettingsControl["icon"]
  
  /** The direction in which the tooltip should grow. */
  tooltipDirection?: Components.VimeSettingsControl["tooltipDirection"]
  
  /**  */
  menu?: Components.VimeSettingsControl["menu"]
  
  /**  */
  expanded?: Components.VimeSettingsControl["expanded"]
  
  /**  */
  i18n?: Components.VimeSettingsControl["i18n"]
}

interface VimeSettingsControlEvents {
  
}

interface VimeSettingsControlSlots {
  default: any
}
  
/* generated by Svelte v3.24.1 */
import {
	SvelteComponent,
	binding_callbacks,
	create_slot,
	detach,
	element,
	init,
	insert,
	safe_not_equal,
	set_custom_element_data,
	transition_in,
	transition_out,
	update_slot
} from "svelte/internal";

import { createEventDispatcher, onMount } from "svelte";

function create_fragment(ctx) {
	let vime_settings_control;
	let current;
	const default_slot_template = /*$$slots*/ ctx[8].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[7], null);

	return {
		c() {
			vime_settings_control = element("vime-settings-control");
			if (default_slot) default_slot.c();
			set_custom_element_data(vime_settings_control, "icon", /*icon*/ ctx[0]);
			set_custom_element_data(vime_settings_control, "tooltip-direction", /*tooltipDirection*/ ctx[1]);
			set_custom_element_data(vime_settings_control, "menu", /*menu*/ ctx[2]);
			set_custom_element_data(vime_settings_control, "expanded", /*expanded*/ ctx[3]);
		},
		m(target, anchor) {
			insert(target, vime_settings_control, anchor);

			if (default_slot) {
				default_slot.m(vime_settings_control, null);
			}

			/*vime_settings_control_binding*/ ctx[9](vime_settings_control);
			current = true;
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 128) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[7], dirty, null, null);
				}
			}

			if (!current || dirty & /*icon*/ 1) {
				set_custom_element_data(vime_settings_control, "icon", /*icon*/ ctx[0]);
			}

			if (!current || dirty & /*tooltipDirection*/ 2) {
				set_custom_element_data(vime_settings_control, "tooltip-direction", /*tooltipDirection*/ ctx[1]);
			}

			if (!current || dirty & /*menu*/ 4) {
				set_custom_element_data(vime_settings_control, "menu", /*menu*/ ctx[2]);
			}

			if (!current || dirty & /*expanded*/ 8) {
				set_custom_element_data(vime_settings_control, "expanded", /*expanded*/ ctx[3]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(vime_settings_control);
			if (default_slot) default_slot.d(detaching);
			/*vime_settings_control_binding*/ ctx[9](null);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let __ref;
	let __mounted = false;
	const dispatch = createEventDispatcher();
	let { icon = undefined } = $$props;
	let { tooltipDirection = undefined } = $$props;
	let { menu = undefined } = $$props;
	let { expanded = undefined } = $$props;
	let { i18n = undefined } = $$props;
	const getWebComponent = () => __ref;

	onMount(() => {
		$$invalidate(10, __mounted = true);
	});

	const setProp = (prop, value) => {
		if (__ref) $$invalidate(4, __ref[prop] = value, __ref);
	};

	const onEvent = e => {
		e.stopPropagation();
		dispatch(e.type, e.detail);
	};

	let { $$slots = {}, $$scope } = $$props;

	function vime_settings_control_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			__ref = $$value;
			$$invalidate(4, __ref);
		});
	}

	$$self.$$set = $$props => {
		if ("icon" in $$props) $$invalidate(0, icon = $$props.icon);
		if ("tooltipDirection" in $$props) $$invalidate(1, tooltipDirection = $$props.tooltipDirection);
		if ("menu" in $$props) $$invalidate(2, menu = $$props.menu);
		if ("expanded" in $$props) $$invalidate(3, expanded = $$props.expanded);
		if ("i18n" in $$props) $$invalidate(5, i18n = $$props.i18n);
		if ("$$scope" in $$props) $$invalidate(7, $$scope = $$props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*__mounted, i18n*/ 1056) {
			$: if (__mounted) setProp("i18n", i18n);
		}
	};

	return [
		icon,
		tooltipDirection,
		menu,
		expanded,
		__ref,
		i18n,
		getWebComponent,
		$$scope,
		$$slots,
		vime_settings_control_binding
	];
}

class VimeSettingsControl extends SvelteComponent {
  $$prop_def: VimeSettingsControlProps;
  $$events_def: VimeSettingsControlEvents;
  $$slot_def: VimeSettingsControlSlots;

  $on<K extends keyof VimeSettingsControlEvents>(type: K, callback: (e: VimeSettingsControlEvents[K]) => any): () => void {
	  return super.$on(type, callback);
	}

  $set($$props: Partial<VimeSettingsControlProps>): void {
	  super.$set($$props);
	}

	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			icon: 0,
			tooltipDirection: 1,
			menu: 2,
			expanded: 3,
			i18n: 5,
			getWebComponent: 6
		});
	}

	get getWebComponent(): HTMLVimeSettingsControlElement | undefined {
		return this.$$.ctx[6];
	}
}

export default VimeSettingsControl;